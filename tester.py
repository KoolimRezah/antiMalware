import os
import pefile
import hashlib
import ssl
import detector2
import entropyBetter
import upx
import tracer
import sqlite3
import string

curPath = os.path.dirname(os.path.abspath(__file__))


def checkIAT(peFile):
    "Recieves a file and checks its IAT(Import Address Table) for suspicious functions"
    pe = pefile.PE(peFile)  # peFile is a path, here we open the file as a PE file.

    pe.parse_data_directories()

    address = []
    moduleNames = []

    for entry in pe.DIRECTORY_ENTRY_IMPORT:  # appending all import modules to a list
        # print entry.dll
        for imp in entry.imports:
            address.append(hex(imp.address))
            moduleNames.append(imp.name)

    compare(moduleNames)

    pe.close()


def compare(moduleNames):
    "Help function for checkIAT"
    conn = sqlite3.connect(os.path.join(curPath, 'Functions.sqlite'))
    c = conn.cursor()
    suspicious = []
    # print "In func"
    functions = c.execute("SELECT * FROM Functions")
    # print "selected"
    for function in functions:
        suspicious.append(function[0])
    #print "Number of functions: ", len(suspicious)
    #suspicious = open(os.path.join(curPath,'suspiciousFunctions.txt')).readlines()
    for func in suspicious:
        for importName in moduleNames:
            if func == importName:
                print "Suspicious function found:",
                t = c.execute("select * from Functions f where f.Name == ?", [func])
                for row in t:
                    print row[0], row[1]
                print
    conn.close()


def checkSections(peFile):
    pe = pefile.PE(peFile)
    result = checkSectionsH(pe)
    pe.close()
    if result:
        return "Probably Not Packed"
    return "Probably Packed"


def checkSectionsH(pe):
    defaultSections = ['.text', '.data', '.rdata', '.bss']  # Unpacked default sections

    sections = []

    for section in pe.sections:
        sections.append(section)

    for section in defaultSections:
        if section in sections:
            return False
    return True


def entropy(path):
    entropy = entropyBetter.getEntropy(path)
    print "Entropy - ", entropy
    if (entropy > 90):
        print "Entropy is over 90, probably packed"
    else:
        print "Entropy is lower than 90, probably not packed"


def exist(lst, item):
    "Checks if item is inside lst"
    for items in lst:
        if items == item:
            return True
    # print func
    return False


# def main(fileName):
def main(path, tests, time = 5):
    entropy(path)

    if upx.isUPX(path):
        print "Packed with UPX"
        print "Unpacking..."
        try:
            upx.unpackUPX(path)
        except Exception, e:
            print "Unpacking error:", e
            return False
        print "Unpacked!"

    resultPacker = detector2.main(path)
    print resultPacker

    checkIAT(path)
    # print "The tests are: ",tests
    if (exist(tests, "1")):
        print "Testing time triger..."
        tracer.timeTrace(path)
        print "Finished testing time trigers!"

    if (exist(tests, "2")):
        print "Testing keyboard layouts..."
        tracer.keyboardTrace(path)
        print "Finished testing keyboard layout trigers!"

    if (exist(tests, "3")):
        print "Testing mouse moevement triger..."
        tracer.mouseTrace(path+" "+time)
        print "Finished testing mouse movement triger!"

    print "Finished testing!"
    return True


if __name__ == '__main__':
    try:
        # main(option.file)
        main()
    except Exception, e:
        print "Faield to execute main:", e
