from socket import *
import os
import optparse
import hashlib
import ssl
import sys
import re

sendSize = 1024
curPath = curPath = os.path.dirname(os.path.abspath(__file__))
if len(sys.argv) <= 2:
    print r"Usage: client.py -f [path]filename [-p ip]"
    sys.exit()

def makeSock(ip,port):
    "Creates the communication socket"
    sock = socket(AF_INET,SOCK_STREAM)

    sock.connect((ip,port))
    
    return sock

def sendFile(fName,sock,tests = None):
    "Sends the file"
    f = open(fName,"rb")
    size = os.path.getsize(fName)
    if not tests:
        print "Tests are:"
        print "1. Time triger test"
        print "2. Keyboard layout\languages test"
        print "3. Mouse movement test"
        tests = raw_input("Select the numbers of the test you would like to execute: ")
    #To self: add test input and send to server  -V
    sock.send(str(size)+","+tests)
    sock.recv(4096)
    resultHash = hashlib.sha256(f.read()).hexdigest()
    #print resultHash
    sock.sendall(resultHash)
    f.seek(0)
    sock.recv(1024)
    print "----------------"
    print "Sending file..."
    print size,
    while(size > 0):
        data = f.read(sendSize)
        sock.sendall(data)
        sock.recv(1024)
        size = size - sendSize
        print "\r%3d" % size, #debugging
    print ""
    print "Finished Sending!"
    f.close()

def recvResults(sock):
    f = open(os.path.join(curPath,"ResultsClient","results.txt"),"w")
    f.seek(0)
    print "Waiting to recieve results..."
    results = sock.recv(4096)
    f.write(results)
    print "Recieved results!"
    print "Results are: "
    print "----------------"
    print results
    print "----------------"
    f.close()
    with open(os.path.join(curPath,"ResultsClient","results.txt"),"r") as f:  
        lines = f.readlines()
    nLines = []
    for l in lines:
        if l.find("...") == -1 :
            nLines.append(l)
    s = ""
    for l in nLines:
        s = s + l
    with open(os.path.join(curPath,"ResultsClient","results.txt"),"w") as f:
        f.write(s)           
    


def main(fName,ip = "127.0.0.1", tests = None):
    sock = makeSock(ip,10056)
    sendFile(fName,sock,tests)
    recvResults(sock)
    sock.close()
    print "finished"
    
if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-f","--file",dest="file",help="File to send")
    parser.add_option("-p","--IP",dest="ip",help="Ip to connect to")
    parser.add_option("-t","--tests",dest="tests",help="Tests to run")
    option,argument = parser.parse_args()
    print option.tests
    try:
        if(option.ip):
            main(option.file,option.ip,option.tests)
        else:
            main(option.file,tests = option.tests)
    except Exception, e:
        print "Failed to execute main: ", e
    
