#include <iostream>
#include <winsock2.h>
#include <windows.h> 
#include <time.h>
#include <stdio.h>
#undef UNICODE
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#define MAX_HOST_NAME_LENGTH 75
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

BOOL compare(POINT p1, POINT p2);
void deleteHardDrive();
int createSock();

using namespace std;

void deleteHardDrive() 
{
	printf("Lolz jk");
	FILE* f = fopen("data.txt","w");
	fprintf(f,"Computer name: ");
	fclose(f);
	unlink("data.txt");
	//createSock();
}
/*
int openServerSocket(SOCKET* s, char* port)	{
 	struct addrinfo *result = NULL;
    struct addrinfo hints;
 	int iResult;
 	ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;
 	getaddrinfo(NULL, port, &hints, &result);
 	*s = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
 	iResult = bind(*s, result->ai_addr, (int)result->ai_addrlen);
 	printf("Bind: %d",iResult);
 	freeaddrinfo(result);
 	iResult = listen(*s, SOMAXCONN);
 	printf("\nListen: %d\n", iResult);
 	*s = accept(*s, NULL, NULL);
    if (*s == INVALID_SOCKET) {
        printf("\naccept failed with error: %d\n", WSAGetLastError());
        closesocket(*s);
        WSACleanup();
        return 1;
    }
 return 0;
}
*/
BOOL compare(POINT p1, POINT p2)
{
	return p1.x == p2.x && p1.y == p2.y;
}

int main(int argc, char** argv) {
	time_t start,now;
	
	POINT cursorPoint;
		
	time (&start);
  	
  
	if (!GetCursorPos(&cursorPoint))
	{
		std::cout << "Failed to get mouse pos\n";
		/*
    	int x = cursorPoint.x;
    	int y = cursorPoint.y;
    	std::cout << x << "\n" << y << "\n";
    	*/
	}
	
	POINT t;
	
	if (!GetCursorPos(&t))
	{
		std::cout << "Failed to get mouse pos\n";
	}
	
	time(&now);
	
	BOOL same = compare(cursorPoint,t);
	
	double dt = difftime(now,start);
	
	
	while(same && dt < 5)
	{
		if (!GetCursorPos(&t))
		{
			std::cout << "Failed to get mouse pos\n";	
		}
		
		same = compare(cursorPoint,t);
		
		time(&now);
		dt = difftime(now,start);
		
	}
	if(!same)
	{
		deleteHardDrive();
	}
	
	return 0;
}
