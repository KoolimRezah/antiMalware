// GDI32 DLL Native Interface entry points

// @author Roger Orr <rogero@howzatt.demon.co.uk>

// Copyright &copy; 2013.
// This software is distributed in the hope that it will be useful, but
// without WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

// Permission is granted to anyone to make or distribute verbatim
// copies of this software provided that the copyright notice and
// this permission notice are preserved, and that the distributor
// grants the recipient permission for further distribution as permitted
// by this notice.

// Comments and suggestions are always welcome.
// Please report bugs to rogero@howzatt.demon.co.uk.

// $Id: Gdi32Trace.cfg 1405 2013-11-12 23:57:17Z Roger $

//[Gdi32.dll]
//[Other]

typedef HANDLE DHPDEV;
typedef HANDLE DHSURF;
typedef HANDLE HACCEL;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDESK;
typedef HANDLE HDEV;
typedef HANDLE HDWP;
typedef HANDLE HFONT;
typedef HANDLE HHOOK;
typedef HANDLE HKL;
typedef HANDLE HLSURF;
typedef HANDLE HMENU;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef HANDLE HRAWINPUT;
typedef HANDLE HRGN;
typedef HANDLE HSURF;
typedef HANDLE HUMPD;
typedef HANDLE HWINEVENTHOOK;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef HANDLE OPM_PROTECTED_OUTPUT_HANDLE;

typedef PHANDLE PHDC;
typedef PHANDLE POPM_PROTECTED_OUTPUT_HANDLE;

typedef PULONG PCOLORPALETTEINFO;
typedef PULONG PCOLORREF;
typedef PULONG PICM_DIB_INFO;

typedef PVOID LPMC_VCP_CODE_TYPE;
typedef PVOID LPMC_TIMING_REPORT;
typedef PVOID MONITORENUMPROC;
typedef PVOID PACCEL;
typedef PVOID PARAM;
typedef PVOID PBITMAPINFO;
typedef PVOID PBLENDOBJ;
typedef PVOID PBOOL;
typedef PVOID PBRUSHOBJ;
typedef PVOID PCHANGEFILTERSTRUCT;
typedef PVOID PCHWIDTHINFO;
typedef PVOID PCLIPLINE;
typedef PVOID PCLIPOBJ;
typedef PVOID PCOLORADJUSTMENT;
typedef PVOID PCOMBOBOXINFO;
typedef PVOID PCRAWINPUTDEVICE;
typedef PVOID PCRECT;
typedef PVOID PCURSORINFO;
typedef PVOID PCWSTR;
typedef PVOID PD3DNTHAL_CALLBACKS;
typedef PVOID PD3DNTHAL_CONTEXTCREATEI;
typedef PVOID PD3DNTHAL_CONTEXTDESTROYALLDATA;
typedef PVOID PD3DNTHAL_CONTEXTDESTROYDATA;
typedef PVOID PD3DNTHAL_DRAWPRIMITIVES2DATA;
typedef PVOID PD3DNTHAL_GLOBALDRIVERDATA;
typedef PVOID PD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef PVOID PDDSURFACEDESC;
typedef PVOID PDDVIDEOPORTNOTIFY;
typedef PVOID PDD_ADDATTACHEDSURFACEDATA;
typedef PVOID PDD_BEGINMOCOMPFRAMEDATA;
typedef PVOID PDD_BLTDATA;
typedef PVOID PDD_CANCREATESURFACEDATA;
typedef PVOID PDD_CANCREATEVPORTDATA;
typedef PVOID PDD_COLORCONTROLDATA;
typedef PVOID PDD_CREATEMOCOMPDATA;
typedef PVOID PDD_CREATESURFACEDATA;
typedef PVOID PDD_CREATEVPORTDATA;
typedef PVOID PDD_D3DBUFCALLBACKS;
typedef PVOID PDD_DESTROYMOCOMPDATA;
typedef PVOID PDD_DESTROYVPORTDATA;
typedef PVOID PDD_ENDMOCOMPFRAMEDATA;
typedef PVOID PDD_FLIPDATA;
typedef PVOID PDD_FLIPTOGDISURFACEDATA;
typedef PVOID PDD_FLIPVPORTDATA;
typedef PVOID PDD_GETAVAILDRIVERMEMORYDATA;
typedef PVOID PDD_GETBLTSTATUSDATA;
typedef PVOID PDD_GETDRIVERINFODATA;
typedef PVOID PDD_GETDRIVERSTATEDATA;
typedef PVOID PDD_GETFLIPSTATUSDATA;
typedef PVOID PDD_GETINTERNALMOCOMPDATA;
typedef PVOID PDD_GETMOCOMPCOMPBUFFDATA;
typedef PVOID PDD_GETMOCOMPFORMATSDATA;
typedef PVOID PDD_GETMOCOMPGUIDSDATA;
typedef PVOID PDD_GETSCANLINEDATA;
typedef PVOID PDD_GETVPORTBANDWIDTHDATA;
typedef PVOID PDD_GETVPORTCONNECTDATA;
typedef PVOID PDD_GETVPORTFIELDDATA;
typedef PVOID PDD_GETVPORTFLIPSTATUSDATA;
typedef PVOID PDD_GETVPORTINPUTFORMATDATA;
typedef PVOID PDD_GETVPORTLINEDATA;
typedef PVOID PDD_GETVPORTOUTPUTFORMATDATA;
typedef PVOID PDD_GETVPORTSIGNALDATA;
typedef PVOID PDD_HALINFO;
typedef PVOID PDD_LOCKDATA;
typedef PVOID PDD_QUERYMOCOMPSTATUSDATA;
typedef PVOID PDD_RENDERMOCOMPDATA;
typedef PVOID PDD_SETCOLORKEYDATA;
typedef PVOID PDD_SETEXCLUSIVEMODEDATA;
typedef PVOID PDD_SETOVERLAYPOSITIONDATA;
typedef PVOID PDD_SURFACE_GLOBAL;
typedef PVOID PDD_SURFACE_LOCAL;
typedef PVOID PDD_SURFACE_MORE;
typedef PVOID PDD_UNLOCKDATA;
typedef PVOID PDD_UPDATEOVERLAYDATA;
typedef PVOID PDD_UPDATEVPORTDATA;
typedef PVOID PDD_VPORTCOLORDATA;
typedef PVOID PDD_WAITFORVERTICALBLANKDATA;
typedef PVOID PDD_WAITFORVPORTSYNCDATA;
typedef PVOID PDESIGNVECTOR;
typedef PVOID PDEVCAPS;
typedef PVOID PDEVMODEW;
typedef PVOID PDOCINFOW;
typedef PVOID PDOWNLOADDESIGNVECTOR;
typedef PVOID PDRIVER_INFO_2W;
typedef PVOID PDXGI_FORMAT;
typedef PVOID PDXGKMDT_OPM_CONFIGURE_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_ENCRYPTED_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_GET_INFO_PARAMETERS;
typedef PVOID PDXGKMDT_OPM_RANDOM_NUMBER;
typedef PVOID PDXGKMDT_OPM_REQUESTED_INFORMATION;
typedef PVOID PENUMLOGFONTEXDVW;
typedef PVOID PEXTLOGFONTW;
typedef PVOID PEXTTEXTMETRIC;
typedef PVOID PFD_GLYPHATTR;
typedef PVOID PFD_GLYPHSET;
typedef PVOID PFLASHWINFO;
typedef PVOID PFLATPTR;
typedef PVOID PFLONG;
typedef PVOID PFONTINFO;
typedef PVOID PFONTOBJ;
typedef PVOID PFONTSIGNATURE;
typedef PVOID PFONT_FILE_INFO;
typedef PVOID PFONT_REALIZATION_INFO;
typedef PVOID PGCP_RESULTSW;
typedef PVOID PGESTURECONFIG;
typedef PVOID PGLYPHMETRICS;
typedef PVOID PGLYPHSET;
typedef PVOID PGUITHREADINFO;
typedef PVOID PHGLYPH;
typedef PVOID PHLSURF_INFORMATION_PROBE;
typedef PVOID PHUMPD;
typedef PVOID PIFIMETRICS;
typedef PVOID PINPUT;
typedef PVOID PKERNEL_PVOID;
typedef PVOID PKERNINGPAIR;
typedef PVOID PLINEATTRS;
typedef PVOID PLOGCOLORSPACEEXW;
typedef PVOID PLOGCOLORSPACEW;
typedef PVOID PLOGPALETTE;
typedef PVOID PMAT2;
typedef PVOID PMENUBARINFO;
typedef PVOID PMOUSEMOVEPOINT;
typedef PVOID POUTLINETEXTMETRICW;
typedef PVOID PPAINTSTRUCT;
typedef PVOID PPALETTEENTRY;
typedef PVOID PPATHDATA;
typedef PVOID PPATHOBJ;
typedef PVOID PPERBANDINFO;
typedef PVOID PPGLYPHPOS;
typedef PVOID PPIXELFORMATDESCRIPTOR;
typedef PVOID PPOINT;
typedef PVOID PPOINTFIX;
typedef PVOID PPOINTL;
typedef PVOID PPOINTQF;
typedef PVOID PPOLYPATBLT;
typedef PVOID PPOLYTEXTW;
typedef PVOID PRASTERIZER_STATUS;
typedef PVOID PRAWINPUTDEVICE;
typedef PVOID PRAWINPUTDEVICELIST;
typedef PVOID PRECT;
typedef PVOID PRECTFX;
typedef PVOID PRECTL;
typedef PVOID PRGNDATA;
typedef PVOID PSCROLLBARINFO;
typedef PVOID PSIZE;
typedef PVOID PSTROBJ;
typedef PVOID PSURFOBJ;
typedef PVOID PTITLEBARINFO;
typedef PVOID PTMDIFF;
typedef PVOID PTMW_INTERNAL;
typedef PVOID PTPMPARAMS;
typedef PVOID PTRACKMOUSEEVENT;
typedef PVOID PTRIVERTEX;
typedef PVOID PUNIVERSAL_FONT_ID;
typedef PVOID PUSHORT;
typedef PVOID PVIDEOMEMORY;
typedef PVOID PVOID;
typedef PVOID PWCHAR;
typedef PVOID PWIDTHDATA;
typedef PVOID PWINDOWPLACEMENT;
typedef PVOID PXFORM;
typedef PVOID PXFORML;
typedef PVOID PXFORMOBJ;
typedef PVOID PXLATEOBJ;
typedef PVOID TIMERPROC;

typedef ULONG ARCTYPE;
typedef ULONG BLENDFUNCTION;
typedef ULONG BYTE;
typedef ULONG COLORPALETTEINFO;
typedef ULONG COLORREF;
typedef ULONG DXGI_FORMAT;
typedef ULONG DXGKMDT_CERTIFICATE_TYPE;
typedef ULONG DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS;
typedef ULONG FLONG;
typedef ULONG HLSURF_INFORMATION_CLASS;
typedef ULONG ICM_DIB_INFO;
typedef ULONG LFTYPE;
typedef ULONG MIX;
typedef ULONG PALETTEENTRY;
typedef ULONG ROP4;

typedef ULONGLONG POINT;
typedef ULONGLONG SIZEL;

// Originally extracted from NtGdi.h using gdi32.sed

BOOL
WINAPI
NtGdiInit(
    );

int
WINAPI
NtGdiSetDIBitsToDeviceInternal(
    __in HDC hdcDest,
    __in int xDst,
    __in int yDst,
    __in DWORD cx,
    __in DWORD cy,
    __in int xSrc,
    __in int ySrc,
    __in DWORD iStartScan,
    __in DWORD cNumScan,
    __in PBYTE pInitBits,
    __in PBITMAPINFO pbmi,
    __in DWORD iUsage,
    __in UINT cjMaxBits,
    __in UINT cjMaxInfo,
    __in BOOL bTransformCoordinates,
    __in_opt HANDLE hcmXform
    );

BOOL
WINAPI
NtGdiGetFontResourceInfoInternalW(
    __in PWSTR pwszFiles,
    __in ULONG cwc,
    __in ULONG cFiles,
    __in UINT cjIn,
    __out PDWORD pdwBytes,
    __out PVOID pvBuf,
    __in DWORD iType
    );

DWORD
WINAPI
NtGdiGetGlyphIndicesW(
    __in HDC hdc,
    __in_opt PWSTR pwc,
    __in int cwc,
    __out_opt PWORD pgi,
    __in DWORD iMode
    );

DWORD
WINAPI
NtGdiGetGlyphIndicesWInternal(
    __in HDC hdc,
    __in_opt PWSTR pwc,
    __in int cwc,
    __out_opt PWORD pgi,
    __in DWORD iMode,
    __in BOOL bSubset
    );


HPALETTE
WINAPI
NtGdiCreatePaletteInternal(
    __in PLOGPALETTE pLogPal,
    __in UINT cEntries
    );

BOOL
WINAPI
NtGdiArcInternal(
    __in ARCTYPE arctype,
    __in HDC hdc,
    __in int x1,
    __in int y1,
    __in int x2,
    __in int y2,
    __in int x3,
    __in int y3,
    __in int x4,
    __in int y4
    );

int

WINAPI
NtGdiStretchDIBitsInternal(
    __in HDC hdc,
    __in int xDst,
    __in int yDst,
    __in int cxDst,
    __in int cyDst,
    __in int xSrc,
    __in int ySrc,
    __in int cxSrc,
    __in int cySrc,
    __in_opt PBYTE pjInit,
    __in PBITMAPINFO pbmi,
    __in DWORD dwUsage,
    __in DWORD dwRop4,
    __in UINT cjMaxInfo,
    __in UINT cjMaxBits,
    __in HANDLE hcmXform
    );

ULONG
WINAPI
NtGdiGetOutlineTextMetricsInternalW(
    __in HDC hdc,
    __in ULONG cjotm,
    __out_opt POUTLINETEXTMETRICW potmw,
    __out PTMDIFF ptmd
    );

BOOL
WINAPI
NtGdiGetAndSetDCDword(
    __in HDC hdc,
    __in UINT u,
    __in DWORD dwIn,
    __out PDWORD pdwResult
    );

HANDLE
WINAPI
NtGdiGetDCObject(
    __in  HDC hdc,
    __in  int itype
    );

HDC
WINAPI
NtGdiGetDCforBitmap(
    __in HBITMAP hsurf
    );

BOOL
WINAPI
NtGdiGetMonitorID(
    __in  HDC hdc,
    __in  DWORD dwSize,
    __out PWSTR pszMonitorID
    );


INT
WINAPI
NtGdiGetLinkedUFIs(
    __in HDC hdc,
    __out_opt PUNIVERSAL_FONT_ID pufiLinkedUFIs,
    __in INT BufferSize
    );

BOOL
WINAPI
NtGdiSetLinkedUFIs(
    __in HDC hdc,
    __in PUNIVERSAL_FONT_ID pufiLinks,
    __in ULONG uNumUFIs
    );

BOOL
WINAPI
NtGdiGetUFI(
    __in  HDC hdc,
    __out PUNIVERSAL_FONT_ID pufi,
    __out_opt PDESIGNVECTOR pdv,
    __out PULONG pcjDV,
    __out PULONG pulBaseCheckSum,
    __out PFLONG pfl
    );

BOOL
WINAPI
NtGdiForceUFIMapping(
    __in HDC hdc,
    __in PUNIVERSAL_FONT_ID pufi
    );

BOOL
WINAPI
NtGdiGetUFIPathname(
    __in PUNIVERSAL_FONT_ID pufi,
    __out PULONG pcwc,
    __out_opt PWSTR pwszPathname,
    __out_opt PULONG pcNumFiles,
    __in FLONG fl,
    __out_opt PBOOL pbMemFont,
    __out_opt PULONG pcjView,
    __out_opt PVOID pvView,
    __out_opt PBOOL pbTTC,
    __out_opt PULONG piTTC
    );

BOOL
WINAPI
NtGdiAddRemoteFontToDC(
    __in HDC hdc,
    __in PVOID pvBuffer,
    __in ULONG cjBuffer,
    __in_opt PUNIVERSAL_FONT_ID pufi
    );

HANDLE
WINAPI
NtGdiAddFontMemResourceEx(
    __in PVOID pvBuffer,
    __in DWORD cjBuffer,
    __in_opt PDESIGNVECTOR pdv,
    __in ULONG cjDV,
    __out PDWORD pNumFonts
    );

BOOL
WINAPI
NtGdiRemoveFontMemResourceEx(
    __in HANDLE hMMFont
    );

BOOL
WINAPI
NtGdiUnmapMemFont(
    __in PVOID pvView
    );

BOOL
WINAPI
NtGdiRemoveMergeFont(
    __in HDC hdc,
    __in PUNIVERSAL_FONT_ID pufi
    );

BOOL
WINAPI
NtGdiAnyLinkedFonts();


BOOL
WINAPI
NtGdiGetEmbUFI(
    __in HDC hdc,
    __out PUNIVERSAL_FONT_ID pufi,
    __out_opt PDESIGNVECTOR pdv,
    __out PULONG pcjDV,
    __out PULONG pulBaseCheckSum,
    __out PFLONG pfl,
    __out PKERNEL_PVOID embFontID
    );

ULONG
WINAPI
NtGdiGetEmbedFonts(
    );

BOOL
WINAPI
NtGdiChangeGhostFont(
    __in  PKERNEL_PVOID pfontID,
    __in  BOOL bLoad
    );

BOOL
WINAPI
NtGdiAddEmbFontToDC(
    __in HDC hdc,
    __in PPVOID pFontID
    );

BOOL
WINAPI
NtGdiFontIsLinked(
    __in HDC hdc
    );

ULONG_PTR
WINAPI
NtGdiPolyPolyDraw(
    __in HDC hdc,
    __in PPOINT ppt,
    __in PULONG pcpt,
    __in ULONG ccpt,
    __in int iFunc
    );

LONG
WINAPI
NtGdiDoPalette(
    __in HPALETTE hpal,
    __in WORD iStart,
    __in WORD cEntries,
    __in_opt PPALETTEENTRY pPalEntries,
    __in DWORD iFunc,
    __in BOOL bInbound
    );

BOOL
WINAPI
NtGdiComputeXformCoefficients(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiGetWidthTable(
    __in HDC hdc,
    __in ULONG cSpecial,
    __in PWCHAR pwc,
    __in ULONG cwc,
    __out PUSHORT psWidth,
    __out_opt PWIDTHDATA pwd,
    __out PFLONG pflInfo
    );

int
WINAPI
NtGdiDescribePixelFormat(
    __in HDC hdc,
    __in int ipfd,
    __in UINT cjpfd,
    __out PPIXELFORMATDESCRIPTOR ppfd
    );

BOOL
WINAPI
NtGdiSetPixelFormat(
    __in HDC hdc,
    __in int ipfd
    );

BOOL
WINAPI
NtGdiSwapBuffers(
    __in HDC hdc
    );

DWORD
WINAPI
NtGdiDxgGenericThunk(
    __in ULONG_PTR ulIndex,
    __in ULONG_PTR ulHandle,
    __inout PSIZE_T pdwSizeOfPtr1,
    __inout  PVOID pvPtr1,
    __inout PSIZE_T pdwSizeOfPtr2,
    __inout  PVOID pvPtr2
    );

DWORD
WINAPI
NtGdiDdAddAttachedSurface(
    __in HANDLE hSurface,
    __in HANDLE hSurfaceAttached,
    __inout PDD_ADDATTACHEDSURFACEDATA puAddAttachedSurfaceData
    );

BOOL
WINAPI
NtGdiDdAttachSurface(
    __in HANDLE  hSurfaceFrom,
    __in HANDLE  hSurfaceTo
    );

DWORD
WINAPI
NtGdiDdBlt(
    __in HANDLE hSurfaceDest,
    __in HANDLE hSurfaceSrc,
    __inout PDD_BLTDATA puBltData
    );

DWORD
WINAPI
NtGdiDdCanCreateSurface(
    __in HANDLE hDirectDraw,
    __inout PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
    );

DWORD
WINAPI
NtGdiDdColorControl(
    __in HANDLE hSurface,
    __inout PDD_COLORCONTROLDATA puColorControlData
    );

HANDLE
WINAPI
NtGdiDdCreateDirectDrawObject(
    __in HDC hdc
    );

DWORD
WINAPI
NtGdiDdCreateSurface(
    __in HANDLE hDirectDraw,
    __in PHANDLE hSurface,
    __inout PDDSURFACEDESC puSurfaceDescription,
    __inout PDD_SURFACE_GLOBAL puSurfaceGlobalData,
    __inout PDD_SURFACE_LOCAL puSurfaceLocalData,
    __inout PDD_SURFACE_MORE puSurfaceMoreData,
    __inout PDD_CREATESURFACEDATA puCreateSurfaceData,
    __out PHANDLE puhSurface
    );

// only defined if COMBOX_SANDBOX is defined
DWORD
WINAPI
NtGdiDdChangeSurfacePointer(
    __in HANDLE hSurface,
    __in PVOID pSurfacePointer
    );


HANDLE
WINAPI
NtGdiDdCreateSurfaceObject(
    __in HANDLE hDirectDrawLocal,
    __in HANDLE hSurface,
    __in PDD_SURFACE_LOCAL puSurfaceLocal,
    __in PDD_SURFACE_MORE puSurfaceMore,
    __in PDD_SURFACE_GLOBAL puSurfaceGlobal,
    __in BOOL bComplete
    );

BOOL
WINAPI
NtGdiDdDeleteSurfaceObject(
    __in HANDLE hSurface
    );

BOOL
WINAPI
NtGdiDdDeleteDirectDrawObject(
    __in HANDLE hDirectDrawLocal
    );

DWORD
WINAPI
NtGdiDdDestroySurface(
    __in HANDLE hSurface,
    __in BOOL bRealDestroy
    );

DWORD
WINAPI
NtGdiDdFlip(
    __in HANDLE hSurfaceCurrent,
    __in HANDLE hSurfaceTarget,
    __in HANDLE hSurfaceCurrentLeft,
    __in HANDLE hSurfaceTargetLeft,
    __inout PDD_FLIPDATA puFlipData
    );

DWORD
WINAPI
NtGdiDdGetAvailDriverMemory(
    __in HANDLE hDirectDraw,
    __inout PDD_GETAVAILDRIVERMEMORYDATA puGetAvailDriverMemoryData
    );

DWORD
WINAPI
NtGdiDdGetBltStatus(
    __in HANDLE hSurface,
    __inout PDD_GETBLTSTATUSDATA puGetBltStatusData
    );

HDC
WINAPI
NtGdiDdGetDC(
    __in HANDLE hSurface,
    __in PPALETTEENTRY puColorTable
    );

DWORD
WINAPI
NtGdiDdGetDriverInfo(
    __in HANDLE hDirectDraw,
    __inout PDD_GETDRIVERINFODATA puGetDriverInfoData
    );

DWORD
WINAPI
NtGdiDdGetFlipStatus(
    __in HANDLE hSurface,
    __inout PDD_GETFLIPSTATUSDATA puGetFlipStatusData
    );

DWORD
WINAPI
NtGdiDdGetScanLine(
    __in HANDLE hDirectDraw,
    __inout PDD_GETSCANLINEDATA puGetScanLineData
    );

DWORD
WINAPI
NtGdiDdSetExclusiveMode(
    __in HANDLE hDirectDraw,
    __inout PDD_SETEXCLUSIVEMODEDATA puSetExclusiveModeData
    );

DWORD
WINAPI
NtGdiDdFlipToGDISurface(
    __in HANDLE hDirectDraw,
    __inout PDD_FLIPTOGDISURFACEDATA puFlipToGDISurfaceData
    );

DWORD
WINAPI
NtGdiDdLock(
    __in HANDLE hSurface,
    __inout PDD_LOCKDATA puLockData,
    __in HDC hdcClip
    );

BOOL
WINAPI
NtGdiDdQueryDirectDrawObject(
    __in HANDLE hDirectDrawLocal,
    __out PDD_HALINFO pHalInfo,
    __out PDWORD pCallBackFlags,
    __out_opt PD3DNTHAL_CALLBACKS puD3dCallbacks,
    __out_opt PD3DNTHAL_GLOBALDRIVERDATA puD3dDriverData,
    __out_opt PDD_D3DBUFCALLBACKS puD3dBufferCallbacks,
    __out_opt PDDSURFACEDESC puD3dTextureFormats,
    __out PDWORD puNumHeaps,
    __out_opt PVIDEOMEMORY puvmList,
    __out PDWORD puNumFourCC,
    __out_opt PDWORD puFourCC
    );

BOOL
WINAPI
NtGdiDdReenableDirectDrawObject(
    __in HANDLE hDirectDrawLocal,
    __inout PBOOL pubNewMode
    );

BOOL
WINAPI
NtGdiDdReleaseDC(
    __in HANDLE hSurface
    );

BOOL
WINAPI
NtGdiDdResetVisrgn(
    __in HANDLE hSurface,
    __in HWND hwnd
    );

DWORD
WINAPI
NtGdiDdSetColorKey(
    __in HANDLE hSurface,
    __inout PDD_SETCOLORKEYDATA puSetColorKeyData
    );

DWORD
WINAPI
NtGdiDdSetOverlayPosition(
    __in HANDLE hSurfaceSource,
    __in HANDLE hSurfaceDestination,
    __inout PDD_SETOVERLAYPOSITIONDATA puSetOverlayPositionData
    );

VOID
WINAPI
NtGdiDdUnattachSurface(
    __in HANDLE hSurface,
    __in HANDLE hSurfaceAttached
    );

DWORD
WINAPI
NtGdiDdUnlock(
    __in HANDLE hSurface,
    __inout PDD_UNLOCKDATA puUnlockData
    );

DWORD
WINAPI
NtGdiDdUpdateOverlay(
    __in HANDLE hSurfaceDestination,
    __in HANDLE hSurfaceSource,
    __inout PDD_UPDATEOVERLAYDATA puUpdateOverlayData
    );

DWORD
WINAPI
NtGdiDdWaitForVerticalBlank(
    __in HANDLE hDirectDraw,
    __inout PDD_WAITFORVERTICALBLANKDATA puWaitForVerticalBlankData
    );

HANDLE
WINAPI
NtGdiDdGetDxHandle(
    __in_opt HANDLE hDirectDraw,
    __in_opt HANDLE hSurface,
    __in BOOL bRelease
    );

BOOL
WINAPI
NtGdiDdSetGammaRamp(
    __in HANDLE hDirectDraw,
    __in HDC hdc,
    __in PVOID pGammaRamp
    );

DWORD
WINAPI
NtGdiDdLockD3D(
    __in HANDLE hSurface,
    __inout PDD_LOCKDATA puLockData
    );

DWORD
WINAPI
NtGdiDdUnlockD3D(
    __in HANDLE hSurface,
    __inout PDD_UNLOCKDATA puUnlockData
    );

DWORD
WINAPI
NtGdiDdCreateD3DBuffer(
    __in HANDLE hDirectDraw,
    __inout PHANDLE hSurface,
    __inout PDDSURFACEDESC puSurfaceDescription,
    __inout PDD_SURFACE_GLOBAL puSurfaceGlobalData,
    __inout PDD_SURFACE_LOCAL puSurfaceLocalData,
    __inout PDD_SURFACE_MORE puSurfaceMoreData,
    __inout PDD_CREATESURFACEDATA puCreateSurfaceData,
    __inout PHANDLE puhSurface
    );

DWORD
WINAPI
NtGdiDdCanCreateD3DBuffer(
    __in HANDLE hDirectDraw,
    __inout PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
    );

DWORD
WINAPI
NtGdiDdDestroyD3DBuffer(
    __in HANDLE hSurface
    );

DWORD
WINAPI
NtGdiD3dContextCreate(
    __in HANDLE hDirectDrawLocal,
    __in HANDLE hSurfColor,
    __in HANDLE hSurfZ,
    __inout PD3DNTHAL_CONTEXTCREATEI pdcci
    );

DWORD
WINAPI
NtGdiD3dContextDestroy(
    __in PD3DNTHAL_CONTEXTDESTROYDATA
    );

DWORD
WINAPI
NtGdiD3dContextDestroyAll(
    __out PD3DNTHAL_CONTEXTDESTROYALLDATA pdcdad
    );

DWORD
WINAPI
NtGdiD3dValidateTextureStageState(
    __inout PD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA pData
    );

DWORD
WINAPI
NtGdiD3dDrawPrimitives2(
    __in HANDLE hCmdBuf,
    __in HANDLE hVBuf,
    __inout PD3DNTHAL_DRAWPRIMITIVES2DATA pded,
    __inout PFLATPTR pfpVidMemCmd,
    __inout PDWORD pdwSizeCmd,
    __inout PFLATPTR pfpVidMemVtx,
    __inout PDWORD pdwSizeVtx
    );

DWORD
WINAPI
NtGdiDdGetDriverState(
    __inout PDD_GETDRIVERSTATEDATA pdata
    );

DWORD
WINAPI
NtGdiDdCreateSurfaceEx(
    __in HANDLE hDirectDraw,
    __in HANDLE hSurface,
    __in DWORD dwSurfaceHandle
    );

DWORD
WINAPI
NtGdiDvpCanCreateVideoPort(
    __in HANDLE hDirectDraw,
    __inout PDD_CANCREATEVPORTDATA puCanCreateVPortData
    );

DWORD
WINAPI
NtGdiDvpColorControl(
    __in HANDLE hVideoPort,
    __inout PDD_VPORTCOLORDATA puVPortColorData
    );

HANDLE
WINAPI
NtGdiDvpCreateVideoPort(
    __in HANDLE hDirectDraw,
    __inout PDD_CREATEVPORTDATA puCreateVPortData
    );

DWORD
WINAPI
NtGdiDvpDestroyVideoPort(
    __in HANDLE hVideoPort,
    __inout PDD_DESTROYVPORTDATA puDestroyVPortData
    );

DWORD
WINAPI
NtGdiDvpFlipVideoPort(
    __in HANDLE hVideoPort,
    __in HANDLE hDDSurfaceCurrent,
    __in HANDLE hDDSurfaceTarget,
    __inout PDD_FLIPVPORTDATA puFlipVPortData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortBandwidth(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTBANDWIDTHDATA puGetVPortBandwidthData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortField(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTFIELDDATA puGetVPortFieldData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortFlipStatus(
    __in HANDLE hDirectDraw,
    __inout PDD_GETVPORTFLIPSTATUSDATA puGetVPortFlipStatusData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortInputFormats(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTINPUTFORMATDATA puGetVPortInputFormatData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortLine(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTLINEDATA puGetVPortLineData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortOutputFormats(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTOUTPUTFORMATDATA puGetVPortOutputFormatData
    );

DWORD
WINAPI
NtGdiDvpGetVideoPortConnectInfo(
    __in HANDLE hDirectDraw,
    __inout PDD_GETVPORTCONNECTDATA puGetVPortConnectData
    );

DWORD
WINAPI
NtGdiDvpGetVideoSignalStatus(
    __in HANDLE hVideoPort,
    __inout PDD_GETVPORTSIGNALDATA puGetVPortSignalData
    );

DWORD
WINAPI
NtGdiDvpUpdateVideoPort(
    __in HANDLE hVideoPort,
    __in PHANDLE phSurfaceVideo,
    __in PHANDLE phSurfaceVbi,
    __inout PDD_UPDATEVPORTDATA puUpdateVPortData
    );

DWORD
WINAPI
NtGdiDvpWaitForVideoPortSync(
    __in HANDLE hVideoPort,
    __inout PDD_WAITFORVPORTSYNCDATA puWaitForVPortSyncData
    );

DWORD
WINAPI
NtGdiDvpAcquireNotification(
    __in HANDLE hVideoPort,
    __inout PHANDLE hEvent,
    __in PDDVIDEOPORTNOTIFY pNotify
    );

DWORD
WINAPI
NtGdiDvpReleaseNotification(
    __in HANDLE hVideoPort,
    __in HANDLE hEvent
    );

DWORD
WINAPI
NtGdiDdGetMoCompGuids(
    __in HANDLE hDirectDraw,
    __inout PDD_GETMOCOMPGUIDSDATA puGetMoCompGuidsData
    );

DWORD
WINAPI
NtGdiDdGetMoCompFormats(
    __in HANDLE hDirectDraw,
    __inout PDD_GETMOCOMPFORMATSDATA puGetMoCompFormatsData
    );

DWORD
WINAPI
NtGdiDdGetMoCompBuffInfo(
    __in HANDLE hDirectDraw,
    __inout PDD_GETMOCOMPCOMPBUFFDATA puGetBuffData
    );

DWORD
WINAPI
NtGdiDdGetInternalMoCompInfo(
    __in HANDLE hDirectDraw,
    __inout PDD_GETINTERNALMOCOMPDATA puGetInternalData
    );

HANDLE
WINAPI
NtGdiDdCreateMoComp(
    __in HANDLE hDirectDraw,
    __inout PDD_CREATEMOCOMPDATA puCreateMoCompData
    );

DWORD
WINAPI
NtGdiDdDestroyMoComp(
    __in HANDLE hMoComp,
    __inout PDD_DESTROYMOCOMPDATA puDestroyMoCompData
    );

DWORD
WINAPI
NtGdiDdBeginMoCompFrame(
    __in HANDLE hMoComp,
    __inout PDD_BEGINMOCOMPFRAMEDATA puBeginFrameData
    );

DWORD
WINAPI
NtGdiDdEndMoCompFrame(
    __in HANDLE hMoComp,
    __inout PDD_ENDMOCOMPFRAMEDATA puEndFrameData
    );

DWORD
WINAPI
NtGdiDdRenderMoComp(
    __in HANDLE hMoComp,
    __inout PDD_RENDERMOCOMPDATA puRenderMoCompData
    );

DWORD
WINAPI
NtGdiDdQueryMoCompStatus(
    __in HANDLE hMoComp,
    __inout PDD_QUERYMOCOMPSTATUSDATA puQueryMoCompStatusData
    );

DWORD
WINAPI
NtGdiDdAlphaBlt(
    __in HANDLE hSurfaceDest,
    __in_opt HANDLE hSurfaceSrc,
    __inout PDD_BLTDATA puBltData
    );



BOOL
WINAPI
NtGdiAlphaBlend(
    __in HDC hdcDst,
    __in LONG DstX,
    __in LONG DstY,
    __in LONG DstCx,
    __in LONG DstCy,
    __in HDC hdcSrc,
    __in LONG SrcX,
    __in LONG SrcY,
    __in LONG SrcCx,
    __in LONG SrcCy,
    __in BLENDFUNCTION BlendFunction,
    __in HANDLE hcmXform
    );

BOOL
WINAPI
NtGdiGradientFill(
    __in HDC hdc,
    __in PTRIVERTEX pVertex,
    __in ULONG nVertex,
    __in PVOID pMesh,
    __in ULONG nMesh,
    __in ULONG ulMode
    );


BOOL
WINAPI
NtGdiSetIcmMode(
    __in HDC hdc,
    __in ULONG nCommand,
    __in ULONG ulMode
    );





HANDLE
WINAPI
NtGdiCreateColorSpace(
    __in PLOGCOLORSPACEEXW pLogColorSpace
    );

BOOL
WINAPI
NtGdiDeleteColorSpace(
    __in HANDLE hColorSpace
    );

BOOL
WINAPI
NtGdiSetColorSpace(
    __in HDC hdc,
    __in HCOLORSPACE hColorSpace
    );

HANDLE
WINAPI
NtGdiCreateColorTransform(
    __in HDC hdc,
    __in PLOGCOLORSPACEW pLogColorSpaceW,
    __in_opt PVOID pvSrcProfile,
    __in ULONG cjSrcProfile,
    __in_opt PVOID pvDestProfile,
    __in ULONG cjDestProfile,
    __in_opt PVOID pvTargetProfile,
    __in ULONG cjTargetProfile
    );

BOOL
WINAPI
NtGdiDeleteColorTransform(
    __in HDC hdc,
    __in HANDLE hColorTransform
    );

BOOL
WINAPI
NtGdiCheckBitmapBits(
    __in HDC hdc,
    __in HANDLE hColorTransform,
    __in PVOID pvBits,
    __in ULONG bmFormat,
    __in DWORD dwWidth,
    __in DWORD dwHeight,
    __in DWORD dwStride,
    __out PBYTE paResults
    );


ULONG
WINAPI
NtGdiColorCorrectPalette(
    __in HDC hdc,
    __in HPALETTE hpal,
    __in ULONG FirstEntry,
    __in ULONG NumberOfEntries,
    __inout PPALETTEENTRY ppalEntry,
    __in ULONG Command
    );

ULONG_PTR
WINAPI
NtGdiGetColorSpaceforBitmap(
    __in HBITMAP hsurf
    );


BOOL
WINAPI
NtGdiGetDeviceGammaRamp(
    __in HDC hdc,
    __out PVOID pGammaRamp
    );

BOOL
WINAPI
NtGdiSetDeviceGammaRamp(
    __in HDC hdc,
    __in PVOID pGammaRamp
    );

BOOL
WINAPI
NtGdiIcmBrushInfo(
    __in HDC hdc,
    __in HBRUSH hbrush,
    __inout PBITMAPINFO pbmiDIB,
    __inout PVOID pvBits,
    __inout PULONG pulBits,
    __out_opt PDWORD piUsage,
    __out_opt PBOOL pbAlreadyTran,
    __in ULONG Command
    );




VOID
WINAPI
NtGdiFlush();

HDC
WINAPI
NtGdiCreateMetafileDC(
    __in HDC hdc
    );


BOOL
WINAPI
NtGdiMakeInfoDC(
    __in HDC hdc,
    __in BOOL bSet
    );

HANDLE
WINAPI
NtGdiCreateClientObj(
    __in ULONG ulType
    );

BOOL
WINAPI
NtGdiDeleteClientObj(
    __in HANDLE h
    );

LONG
WINAPI
NtGdiGetBitmapBits(
    __in HBITMAP hbm,
    __in ULONG cjMax,
    __out_opt PBYTE pjOut
    );

BOOL
WINAPI
NtGdiDeleteObjectApp(
    __in HANDLE hobj
    );

int
WINAPI
NtGdiGetPath(
    __in HDC hdc,
    __out_opt PPOINT pptlBuf,
    __out_opt PBYTE pjTypes,
    __in int cptBuf
    );

HDC
WINAPI
NtGdiCreateCompatibleDC(
    __in_opt HDC hdc
    );

HBITMAP
WINAPI
NtGdiCreateDIBitmapInternal(
    __in HDC hdc,
    __in INT cx,
    __in INT cy,
    __in DWORD fInit,
    __in_opt PBYTE pjInit,
    __in_opt PBITMAPINFO pbmi,
    __in DWORD iUsage,
    __in UINT cjMaxInitInfo,
    __in UINT cjMaxBits,
    __in FLONG f,
    __in HANDLE hcmXform
    );

HBITMAP
WINAPI
NtGdiCreateDIBSection(
    __in_opt HDC hdc,
    __in_opt HANDLE hSectionApp,
    __in DWORD dwOffset,
    __in_opt PBITMAPINFO pbmi,
    __in DWORD iUsage,
    __in UINT cjHeader,
    __in FLONG fl,
    __in ULONG_PTR dwColorSpace,
    __out PPVOID ppvBits
    );

HBRUSH
WINAPI
NtGdiCreateSolidBrush(
    __in COLORREF cr,
    __in_opt HBRUSH hbr
    );

HBRUSH
WINAPI
NtGdiCreateDIBBrush(
    __in PVOID pv,
    __in FLONG fl,
    __in UINT  cj,
    __in BOOL  b8X8,
    __in BOOL bPen,
    __in PVOID pClient
    );

HBRUSH
WINAPI
NtGdiCreatePatternBrushInternal(
    __in HBITMAP hbm,
    __in BOOL bPen,
    __in BOOL b8X8
    );

HBRUSH
WINAPI
NtGdiCreateHatchBrushInternal(
    __in ULONG ulStyle,
    __in COLORREF clrr,
    __in BOOL bPen
    );

HPEN
WINAPI
NtGdiExtCreatePen(
    __in ULONG flPenStyle,
    __in ULONG ulWidth,
    __in ULONG iBrushStyle,
    __in ULONG ulColor,
    __in ULONG_PTR lClientHatch,
    __in ULONG_PTR lHatch,
    __in ULONG cstyle,
    __in_opt PULONG pulStyle,
    __in ULONG cjDIB,
    __in BOOL bOldStylePen,
    __in_opt HBRUSH hbrush
    );

HRGN
WINAPI
NtGdiCreateEllipticRgn(
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

HRGN
WINAPI
NtGdiCreateRoundRectRgn(
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom,
    __in int xWidth,
    __in int yHeight
    );

HANDLE
WINAPI
NtGdiCreateServerMetaFile(
    __in DWORD iType,
    __in ULONG cjData,
    __in PBYTE pjData,
    __in DWORD mm,
    __in DWORD xExt,
    __in DWORD yExt
    );

HRGN
WINAPI
NtGdiExtCreateRegion(
    __in_opt PXFORM px,
    __in DWORD cj,
    __in PRGNDATA prgn
    );

ULONG
WINAPI
NtGdiMakeFontDir(
    __in FLONG flEmbed,
    __out PBYTE pjFontDir,
    __in UINT cjFontDir,
    __in PWSTR pwszPathname,
    __in UINT cjPathname
    );

BOOL
WINAPI
NtGdiPolyDraw(
    __in HDC hdc,
    __in PPOINT ppt,
    __in PBYTE pjAttr,
    __in ULONG cpt
    );

BOOL
WINAPI
NtGdiPolyTextOutW(
    __in HDC hdc,
    __in PPOLYTEXTW pptw,
    __in UINT cStr,
    __in DWORD dwCodePage
    );

ULONG
WINAPI
NtGdiGetServerMetaFileBits(
    __in HANDLE hmo,
    __in ULONG cjData,
    __out_opt PBYTE pjData,
    __out PDWORD piType,
    __out PDWORD pmm,
    __out PDWORD pxExt,
    __out PDWORD pyExt
    );

BOOL
WINAPI
NtGdiEqualRgn(
    __in HRGN hrgn1,
    __in HRGN hrgn2
    );

BOOL
WINAPI
NtGdiGetBitmapDimension(
    __in HBITMAP hbm,
    __out PSIZE psize
    );

UINT
WINAPI
NtGdiGetNearestPaletteIndex(
    __in HPALETTE hpal,
    __in COLORREF crColor
    );

BOOL
WINAPI
NtGdiPtVisible(
    __in HDC hdc,
    __in int x,
    __in int y
    );

BOOL
WINAPI
NtGdiRectVisible(
    __in HDC hdc,
    __in PRECT prc
    );

BOOL
WINAPI
NtGdiRemoveFontResourceW(
    __in PWCHAR pwszFiles,
    __in ULONG cwc,
    __in ULONG cFiles,
    __in ULONG fl,
    __in DWORD dwPidTid,
    __in_opt PDESIGNVECTOR pdv
    );

BOOL
WINAPI
NtGdiResizePalette(
    __in HPALETTE hpal,
    __in UINT cEntry
    );

BOOL
WINAPI
NtGdiSetBitmapDimension(
    __in HBITMAP hbm,
    __in int cx,
    __in int cy,
    __out_opt PSIZE psizeOut
    );

int
WINAPI
NtGdiOffsetClipRgn(
    __in HDC hdc,
    __in int x,
    __in int y
    );

int
WINAPI
NtGdiSetMetaRgn(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiSetTextJustification(
    __in HDC hdc,
    __in int lBreakExtra,
    __in int cBreak
    );

int
WINAPI
NtGdiGetAppClipBox(
    __in HDC hdc,
    __out PRECT prc
    );

BOOL
WINAPI
NtGdiGetTextExtentExW(
    __in HDC hdc,
    __in_opt PWSTR pwsz,
    __in ULONG cwc,
    __in ULONG dxMax,
    __out_opt PULONG pcCh,   // range
    __out_opt PULONG pdxOut,
    __out PSIZE psize,
    __in FLONG fl
    );

BOOL
WINAPI
NtGdiGetCharABCWidthsW(
    __in HDC hdc,
    __in UINT wchFirst,
    __in ULONG cwch,
    __in_opt PWCHAR pwch,
    __in FLONG fl,
    __out PVOID pvBuf
    );

DWORD
WINAPI
NtGdiGetCharacterPlacementW(
    __in HDC hdc,
    __in PWSTR pwsz,
    __in int nCount,
    __in int nMaxExtent,
    __inout PGCP_RESULTSW pgcpw,
    __in DWORD dwFlags
    );

BOOL
WINAPI
NtGdiAngleArc(
    __in HDC hdc,
    __in int x,
    __in int y,
    __in DWORD dwRadius,
    __in DWORD dwStartAngle,
    __in DWORD dwSweepAngle
    );

BOOL
WINAPI
NtGdiBeginPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiSelectClipPath(
    __in HDC hdc,
    __in int iMode
    );

BOOL
WINAPI
NtGdiCloseFigure(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiEndPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiAbortPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiFillPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiStrokeAndFillPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiStrokePath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiWidenPath(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiFlattenPath(
    __in HDC hdc
    );

HRGN
WINAPI
NtGdiPathToRegion(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiSetMiterLimit(
    __in HDC hdc,
    __in DWORD dwNew,
    __inout_opt PDWORD pdwOut
    );

BOOL
WINAPI
NtGdiSetFontXform(
    __in HDC hdc,
    __in DWORD dwxScale,
    __in DWORD dwyScale
    );

BOOL
WINAPI
NtGdiGetMiterLimit(
    __in HDC hdc,
    __out PDWORD pdwOut
    );

BOOL
WINAPI
NtGdiEllipse(
    __in HDC hdc,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

BOOL
WINAPI
NtGdiRectangle(
    __in HDC hdc,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

BOOL
WINAPI
NtGdiRoundRect(
    __in HDC hdc,
    __in int x1,
    __in int y1,
    __in int x2,
    __in int y2,
    __in int x3,
    __in int y3
    );

BOOL
WINAPI
NtGdiPlgBlt(
    __in HDC hdcTrg,
    __in PPOINT pptlTrg,
    __in HDC hdcSrc,
    __in int xSrc,
    __in int ySrc,
    __in int cxSrc,
    __in int cySrc,
    __in_opt HBITMAP hbmMask,
    __in int xMask,
    __in int yMask,
    __in DWORD crBackColor
    );

BOOL
WINAPI
NtGdiMaskBlt(
    __in HDC hdc,
    __in int xDst,
    __in int yDst,
    __in int cx,
    __in int cy,
    __in HDC hdcSrc,
    __in int xSrc,
    __in int ySrc,
    __in HBITMAP hbmMask,
    __in int xMask,
    __in int yMask,
    __in DWORD dwRop4,
    __in DWORD crBackColor
    );

BOOL
WINAPI
NtGdiExtFloodFill(
    __in HDC hdc,
    __in INT x,
    __in INT y,
    __in COLORREF crColor,
    __in UINT iFillType
    );

BOOL
WINAPI
NtGdiFillRgn(
    __in HDC hdc,
    __in HRGN hrgn,
    __in HBRUSH hbrush
    );

BOOL
WINAPI
NtGdiFrameRgn(
    __in HDC hdc,
    __in HRGN hrgn,
    __in HBRUSH hbrush,
    __in int xWidth,
    __in int yHeight
    );

COLORREF
WINAPI
NtGdiSetPixel(
    __in HDC hdcDst,
    __in int x,
    __in int y,
    __in COLORREF crColor
    );

DWORD
WINAPI
NtGdiGetPixel(
    __in HDC hdc,
    __in int x,
    __in int y
    );

BOOL
WINAPI
NtGdiStartPage(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiEndPage(
    __in HDC hdc
    );

int
WINAPI
NtGdiStartDoc(
    __in HDC hdc,
    __in PDOCINFOW pdi,
    __out PBOOL pbBanding,
    __in INT iJob
    );

BOOL
WINAPI
NtGdiEndDoc(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiAbortDoc(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiUpdateColors(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiGetCharWidthW(
    __in HDC hdc,
    __in UINT wcFirst,
    __in UINT cwc,
    __in_opt PWCHAR pwc,
    __in FLONG fl,
    __out PVOID pvBuf
    );

BOOL
WINAPI
NtGdiGetCharWidthInfo(
    __in HDC hdc,
    __out PCHWIDTHINFO pChWidthInfo
    );

int
WINAPI
NtGdiDrawEscape(
    __in HDC hdc,
    __in int iEsc,
    __in int cjIn,
    __in_opt PSTR pjIn
    );

int
WINAPI
NtGdiExtEscape(
    __in_opt HDC hdc,
    __in_opt PWCHAR pDriver,
    __in int nDriver,
    __in int iEsc,
    __in int cjIn,
    __in_opt PSTR pjIn,
    __in int cjOut,
    __out_opt PSTR pjOut
    );

ULONG
WINAPI
NtGdiGetFontData(
    __in HDC hdc,
    __in DWORD dwTable,
    __in DWORD dwOffset,
    __out_opt PVOID pvBuf,
    __in ULONG cjBuf
    );

DWORD
WINAPI
NtGdiGetFontFileData(
    __in                 UINT           uFileCollectionID,
    __in                 UINT           uFileIndex,
    __in                 PULONGLONG pullFileOffset,
    __out PVOID pBuffer,
    __in                 SIZE_T         cbSize
    );

DWORD
WINAPI
NtGdiGetFontFileInfo(
    __in                 UINT              uFileCollectionID,
    __in                 UINT              uFileIndex,
    __out PFONT_FILE_INFO pfi,
    __in                 SIZE_T            cbSize,
    __out_opt            PSIZE_T pcbActualSize
    );

ULONG
WINAPI
NtGdiGetGlyphOutline(
    __in HDC hdc,
    __in WCHAR wch,
    __in UINT iFormat,
    __out PGLYPHMETRICS pgm,
    __in ULONG cjBuf,
    __out_opt PVOID pvBuf,
    __in PMAT2 pmat2,
    __in BOOL bIgnoreRotation
    );

BOOL
WINAPI
NtGdiGetETM(
    __in HDC hdc,
    __out_opt PEXTTEXTMETRIC petm
    );

BOOL
WINAPI
NtGdiGetRasterizerCaps(
    __out PRASTERIZER_STATUS praststat,
    __in ULONG cjBytes
    );

ULONG
WINAPI
NtGdiGetKerningPairs(
    __in HDC hdc,
    __in ULONG cPairs,
    __out_opt PKERNINGPAIR pkpDst
    );

BOOL
WINAPI
NtGdiMonoBitmap(
    __in HBITMAP hbm
    );

HBITMAP
WINAPI
NtGdiGetObjectBitmapHandle(
    __in HBRUSH hbr,
    __out PUINT piUsage
    );

ULONG
WINAPI
NtGdiEnumObjects(
    __in HDC hdc,
    __in int iObjectType,
    __in ULONG cjBuf,
    __out_opt PVOID pvBuf
    );



BOOL
WINAPI
NtGdiResetDC(
    __in HDC hdc,
    __in PDEVMODEW pdm,
    __out PBOOL pbBanding,
    __in_opt PDRIVER_INFO_2W pDriverInfo2,
    __out PVOID ppUMdhpdev
    );

DWORD
WINAPI
NtGdiSetBoundsRect(
    __in HDC hdc,
    __in PRECT prc,
    __in DWORD f
    );

BOOL
WINAPI
NtGdiGetColorAdjustment(
    __in HDC hdc,
    __out PCOLORADJUSTMENT pcaOut
    );

BOOL
WINAPI
NtGdiSetColorAdjustment(
    __in HDC hdc,
    __in PCOLORADJUSTMENT pca
    );

BOOL
WINAPI
NtGdiCancelDC(
    __in HDC hdc
    );


HDC
WINAPI
NtGdiOpenDCW(
    __in_opt PUNICODE_STRING pustrDevice,
    __in PDEVMODEW pdm,
    __in PUNICODE_STRING pustrLogAddr,
    __in ULONG iType,
    __in BOOL bDisplay,
    __in_opt HANDLE hspool,
    __in_opt PDRIVER_INFO_2W pDriverInfo2,
    __out PVOID pUMdhpdev
    );

BOOL
WINAPI
NtGdiGetDCDword(
    __in HDC hdc,
    __in UINT u,
    __out PDWORD Result
    );

BOOL
WINAPI
NtGdiGetDCPoint(
    __in HDC hdc,
    __in UINT iPoint,
    __out PPOINTL pptOut
    );

BOOL
WINAPI
NtGdiScaleViewportExtEx(
    __in HDC hdc,
    __in int xNum,
    __in int xDenom,
    __in int yNum,
    __in int yDenom,
    __out_opt PSIZE pszOut
    );

BOOL
WINAPI
NtGdiScaleWindowExtEx(
    __in HDC hdc,
    __in int xNum,
    __in int xDenom,
    __in int yNum,
    __in int yDenom,
    __out_opt PSIZE pszOut
    );

BOOL
WINAPI
NtGdiSetVirtualResolution(
    __in HDC hdc,
    __in int cxVirtualDevicePixel,
    __in int cyVirtualDevicePixel,
    __in int cxVirtualDeviceMm,
    __in int cyVirtualDeviceMm
    );

BOOL
WINAPI
NtGdiSetSizeDevice(
    __in HDC hdc,
    __in int cxVirtualDevice,
    __in int cyVirtualDevice
    );

BOOL
WINAPI
NtGdiGetTransform(
    __in HDC hdc,
    __in DWORD iXform,
    __out PXFORM pxf
    );

BOOL
WINAPI
NtGdiModifyWorldTransform(
    __in HDC hdc,
    __in_opt PXFORM pxf,
    __in DWORD iXform
    );

BOOL
WINAPI
NtGdiCombineTransform(
    __out PXFORM pxfDst,
    __in PXFORM pxfSrc1,
    __in PXFORM pxfSrc2
    );

BOOL
WINAPI
NtGdiTransformPoints(
    __in HDC hdc,
    __in PPOINT pptIn,
    __out PPOINT pptOut,
    __in int c,
    __in int iMode
    );

LONG
WINAPI
NtGdiConvertMetafileRect(
    __in HDC hdc,
    __inout PRECTL prect
    );

int
WINAPI
NtGdiGetTextCharsetInfo(
    __in HDC hdc,
    __out_opt PFONTSIGNATURE pSig,
    __in DWORD dwFlags
    );


BOOL
WINAPI
NtGdiDoBanding(
    __in HDC hdc,
    __in BOOL bStart,
    __out PPOINTL pptl,
    __out PSIZE pSize
    );

ULONG
WINAPI
NtGdiGetPerBandInfo(
    __in HDC hdc,
    __inout PPERBANDINFO ppbi
    );


NTSTATUS
WINAPI
NtGdiGetStats(
    __in HANDLE hProcess,
    __in int iIndex,
    __in int iPidType,
    __out PVOID pResults,
    __in UINT cjResultSize
    );

BOOL
WINAPI
NtGdiSetMagicColors(
    __in HDC hdc,
    __in PALETTEENTRY peMagic,
    __in ULONG Index
    );

HBRUSH
WINAPI
NtGdiSelectBrush(
    __in HDC hdc,
    __in HBRUSH hbrush
    );

HPEN
WINAPI
NtGdiSelectPen(
    __in HDC hdc,
    __in HPEN hpen
    );

HBITMAP
WINAPI
NtGdiSelectBitmap(
    __in HDC hdc,
    __in HBITMAP hbm
    );

HFONT
WINAPI
NtGdiSelectFont(
    __in HDC hdc,
    __in HFONT hf
    );

int
WINAPI
NtGdiExtSelectClipRgn(
    __in     HDC hdc,
    __in_opt HRGN hrgn,
    __in     int iMode
    );

HPEN
WINAPI
NtGdiCreatePen(
    __in int iPenStyle,
    __in int iPenWidth,
    __in COLORREF cr,
    __in_opt HBRUSH hbr
    );

BOOL
WINAPI
NtGdiBitBlt(
    __in HDC hdcDst,
    __in int x,
    __in int y,
    __in int cx,
    __in int cy,
    __in_opt HDC hdcSrc,
    __in int xSrc,
    __in int ySrc,
    __in DWORD rop4,
    __in DWORD crBackColor,
    __in FLONG fl
    );

BOOL
WINAPI
NtGdiTileBitBlt(
    __in HDC hdcDst,
    __in PRECTL prectDst,
    __in HDC hdcSrc,
    __in PRECTL prectSrc,
    __in PPOINTL pptlOrigin,
    __in DWORD rop4,
    __in DWORD crBackColor
    );

BOOL
WINAPI
NtGdiTransparentBlt(
    __in HDC hdcDst,
    __in int xDst,
    __in int yDst,
    __in int cxDst,
    __in int cyDst,
    __in HDC hdcSrc,
    __in int xSrc,
    __in int ySrc,
    __in int cxSrc,
    __in int cySrc,
    __in COLORREF TransColor
    );

BOOL
WINAPI
NtGdiGetTextExtent(
    __in HDC hdc,
    __in PWSTR pwsz,
    __in int cwc,
    __out PSIZE psize,
    __in UINT flOpts
    );

BOOL
WINAPI
NtGdiGetTextMetricsW(
    __in HDC hdc,
    __out PTMW_INTERNAL ptm,
    __in ULONG cj
    );

int
WINAPI
NtGdiGetTextFaceW(
    __in HDC hdc,
    __in int cChar,
    __out_opt PWSTR pszOut,
    __in BOOL bAliasName
    );

int
WINAPI
NtGdiGetRandomRgn(
    __in HDC hdc,
    __in HRGN hrgn,
    __in int iRgn
    );

BOOL
WINAPI
NtGdiExtTextOutW(
    __in HDC hdc,
    __in int x,
    __in int y,
    __in UINT flOpts,
    __in_opt PRECT prcl,
    __in_opt PWSTR pwsz,
    __in int cwc,
    __in_opt PINT pdx,
    __in DWORD dwCodePage
    );

int
WINAPI
NtGdiIntersectClipRect(
    __in HDC hdc,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

HRGN
WINAPI
NtGdiCreateRectRgn(
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

BOOL
WINAPI
NtGdiPatBlt(
    __in HDC hdcDst,
    __in int x,
    __in int y,
    __in int cx,
    __in int cy,
    __in DWORD rop4
    );

BOOL
WINAPI
NtGdiPolyPatBlt(
    __in HDC hdc,
    __in DWORD rop4,
    __in PPOLYPATBLT pPoly,
    __in DWORD Count,
    __in DWORD Mode
    );

BOOL
WINAPI
NtGdiUnrealizeObject(
    __in HANDLE h
    );

HANDLE
WINAPI
NtGdiGetStockObject(
    __in int iObject
    );

HBITMAP
WINAPI
NtGdiCreateCompatibleBitmap(
    __in HDC hdc,
    __in int cx,
    __in int cy
    );

HBITMAP
WINAPI
NtGdiCreateBitmapFromDxSurface(
    __in HDC hdc,
    __in UINT uiWidth,
    __in UINT uiHeight,
    __in DWORD Format,
    __in_opt HANDLE hDxSharedSurface
    );

BOOL
WINAPI
NtGdiBeginGdiRendering(
    __in HBITMAP hbm,
    __in BOOL bDiscard
    );

BOOL
WINAPI
NtGdiEndGdiRendering(
    __in HBITMAP hbm,
    __in BOOL bDiscard,
    __out PBOOL pbDeviceRemoved
    );

BOOL
WINAPI
NtGdiLineTo(
    __in HDC hdc,
    __in int x,
    __in int y
    );

BOOL
WINAPI
NtGdiMoveTo(
    __in HDC hdc,
    __in int x,
    __in int y,
    __out_opt PPOINT pptOut
    );

int
WINAPI
NtGdiExtGetObjectW(
    __in HANDLE h,
    __in int cj,
    __out_opt PVOID pvOut
    );

int
WINAPI
NtGdiGetDeviceCaps(
    __in HDC hdc,
    __in int i
    );

BOOL
WINAPI
NtGdiGetDeviceCapsAll (
    __in_opt HDC hdc,
    __out PDEVCAPS pDevCaps
    );

BOOL
WINAPI
NtGdiStretchBlt(
    __in HDC hdcDst,
    __in int xDst,
    __in int yDst,
    __in int cxDst,
    __in int cyDst,
    __in_opt HDC hdcSrc,
    __in int xSrc,
    __in int ySrc,
    __in int cxSrc,
    __in int cySrc,
    __in DWORD dwRop,
    __in DWORD dwBackColor
    );

BOOL
WINAPI
NtGdiSetBrushOrg(
    __in HDC hdc,
    __in int x,
    __in int y,
    __out PPOINT pptOut
    );

HBITMAP
WINAPI
NtGdiCreateBitmap(
    __in int cx,
    __in int cy,
    __in UINT cPlanes,
    __in UINT cBPP,
    __in_opt PBYTE pjInit
    );

HPALETTE
WINAPI
NtGdiCreateHalftonePalette(
    __in HDC hdc
    );

BOOL
WINAPI
NtGdiRestoreDC(
    __in HDC hdc,
    __in int iLevel
    );

int
WINAPI
NtGdiExcludeClipRect(
    __in HDC hdc,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

int
WINAPI
NtGdiSaveDC(
    __in HDC hdc
    );

int
WINAPI
NtGdiCombineRgn(
    __in HRGN hrgnDst,
    __in HRGN hrgnSrc1,
    __in HRGN hrgnSrc2,
    __in int iMode
    );

BOOL
WINAPI
NtGdiSetRectRgn(
    __in HRGN hrgn,
    __in int xLeft,
    __in int yTop,
    __in int xRight,
    __in int yBottom
    );

LONG
WINAPI
NtGdiSetBitmapBits(
    __in HBITMAP hbm,
    __in ULONG cj,
    __in PBYTE pjInit
    );

int
WINAPI
NtGdiGetDIBitsInternal(
    __in HDC hdc,
    __in HBITMAP hbm,
    __in UINT iStartScan,
    __in UINT cScans,
    __out_opt PBYTE pBits,
    __inout PBITMAPINFO pbmi,
    __in UINT iUsage,
    __in UINT cjMaxBits,
    __in UINT cjMaxInfo
    );

int
WINAPI
NtGdiOffsetRgn(
    __in HRGN hrgn,
    __in int cx,
    __in int cy
    );

int
WINAPI
NtGdiGetRgnBox(
    __in HRGN hrgn,
    __out PRECT prcOut
    );

BOOL
WINAPI
NtGdiRectInRegion(
    __in HRGN hrgn,
    __inout PRECT prcl
    );

DWORD
WINAPI
NtGdiGetBoundsRect(
    __in HDC hdc,
    __out PRECT prc,
    __in DWORD f
    );

BOOL
WINAPI
NtGdiPtInRegion(
    __in HRGN hrgn,
    __in int x,
    __in int y
    );

COLORREF
WINAPI
NtGdiGetNearestColor(
    __in HDC hdc,
    __in COLORREF cr
    );

UINT
WINAPI
NtGdiGetSystemPaletteUse(
    __in HDC hdc
    );

UINT
WINAPI
NtGdiSetSystemPaletteUse(
    __in HDC hdc,
    __in UINT ui
    );

DWORD
WINAPI
NtGdiGetRegionData(
    __in HRGN hrgn,
    __in DWORD nCount,
    __out_opt PRGNDATA pRgnData
    );

BOOL
WINAPI
NtGdiInvertRgn(
    __in HDC hdc,
    __in HRGN hrgn
    );



int
WINAPI
NtGdiAddFontResourceW(
    __in PWCHAR pwszFiles,
    __in ULONG cwc,
    __in ULONG cFiles,
    __in FLONG f,
    __in DWORD dwPidTid,
    __in_opt PDESIGNVECTOR pdv
    );

HFONT
WINAPI
NtGdiHfontCreate(
    __in PENUMLOGFONTEXDVW pelfw,
    __in ULONG cjElfw,
    __in LFTYPE lft,
    __in FLONG  fl,
    __in PVOID pvCliData
    );

HFONT
WINAPI
NtGdiHfontCreate(
    __in PEXTLOGFONTW pelfw,
    __in ULONG cjElfw,
    __in LFTYPE lft,
    __in FLONG fl,
    __in PVOID pvCliData
    );


ULONG
WINAPI
NtGdiSetFontEnumeration(
    __in ULONG ulType
    );

BOOL
WINAPI
NtGdiEnumFonts(
    __in HDC hdc,
    __in ULONG iEnumType,
    __in FLONG flWin31Compat,
    __in ULONG cchFaceName,
    __in_opt PCWSTR pwszFaceName,
    __in ULONG lfCharSet,
    __inout PULONG pulCount,
    __out_opt PVOID pvUserModeBuffer
    );


INT
WINAPI
NtGdiQueryFonts(
    __out PUNIVERSAL_FONT_ID pufiFontList,
    __in ULONG nBufferSize,
    __out PLARGE_INTEGER pTimeStamp
    );



DWORD
NtGdiGetCharSet(
    __in HDC hdc
    );



BOOL
WINAPI
NtGdiEnableEudc(
    __in BOOL
    );

BOOL
WINAPI
NtGdiEudcLoadUnloadLink(
    __in_opt PCWSTR pBaseFaceName,
    __in UINT cwcBaseFaceName,
    __in PCWSTR pEudcFontPath,
    __in UINT cwcEudcFontPath,
    __in INT iPriority,
    __in INT iFontLinkType,
    __in BOOL bLoadLin
    );

UINT
WINAPI
NtGdiGetStringBitmapW(
    __in HDC hdc,
    __in PWSTR pwsz,
    __in UINT cwc,
    __in UINT cj,
    __out PBYTE pSB
    );

ULONG
WINAPI
NtGdiGetEudcTimeStampEx(
    __in_opt PWSTR pBaseFaceName,
    __in ULONG cwcBaseFaceName,
    __in BOOL bSystemTimeStamp
    );

ULONG
WINAPI
NtGdiQueryFontAssocInfo(
    __in HDC hdc
    );


DWORD
NtGdiGetFontUnicodeRanges(
    __in HDC hdc,
    __out_opt PGLYPHSET pgs
    );


BOOL
NtGdiGetRealizationInfo(
    __in HDC hdc,
    __out PFONT_REALIZATION_INFO pri
    );


BOOL
NtGdiAddRemoteMMInstanceToDC(
    __in HDC hdc,
    __in PDOWNLOADDESIGNVECTOR pddv,
    __in ULONG cjDDV
    );



BOOL
WINAPI
NtGdiUnloadPrinterDriver(
    __in PWSTR pDriverName,
    __in ULONG cbDriverName
    );

BOOL
WINAPI
NtGdiEngAssociateSurface(
    __in HSURF hsurf,
    __in HDEV hdev,
    __in FLONG flHooks
    );

BOOL
WINAPI
NtGdiEngEraseSurface(
    __in PSURFOBJ pso,
    __in PRECTL prcl,
    __in ULONG iColor
    );

HBITMAP
WINAPI
NtGdiEngCreateBitmap(
    __in SIZEL sizl,
    __in LONG lWidth,
    __in ULONG iFormat,
    __in FLONG fl,
    __in_opt PVOID pvBits
    );

BOOL
WINAPI
NtGdiEngDeleteSurface(
    __in HSURF hsurf
    );

PSURFOBJ
WINAPI
NtGdiEngLockSurface(
    __in HSURF hsurf
    );

VOID
WINAPI
NtGdiEngUnlockSurface(
    __in PSURFOBJ 
    );

BOOL
WINAPI
NtGdiEngMarkBandingSurface(
    __in HSURF hsurf
    );

HSURF
WINAPI
NtGdiEngCreateDeviceSurface(
    __in DHSURF dhsurf,
    __in SIZEL sizl,
    __in ULONG iFormatCompat
    );

HBITMAP
WINAPI
NtGdiEngCreateDeviceBitmap(
    __in DHSURF dhsurf,
    __in SIZEL sizl,
    __in ULONG iFormatCompat
    );


BOOL
WINAPI
NtGdiEngCopyBits(
    __in PSURFOBJ psoDst,
    __in PSURFOBJ psoSrc,
    __in_opt PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PRECTL prclDst,
    __in PPOINTL pptlSrc
    );

BOOL
WINAPI
NtGdiEngStretchBlt(
    __in PSURFOBJ psoDest,
    __in PSURFOBJ psoSrc,
    __in PSURFOBJ psoMask,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PCOLORADJUSTMENT pca,
    __in PPOINTL pptlHTOrg,
    __in PRECTL prclDest,
    __in PRECTL prclSrc,
    __in PPOINTL pptlMask,
    __in ULONG iMode
    );

BOOL
WINAPI
NtGdiEngBitBlt(
    __in PSURFOBJ psoDst,
    __in PSURFOBJ psoSrc,
    __in PSURFOBJ psoMask,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PRECTL prclDst,
    __in PPOINTL pptlSrc,
    __in PPOINTL pptlMask,
    __in PBRUSHOBJ pbo,
    __in PPOINTL pptlBrush,
    __in ROP4 rop4
    );

BOOL
WINAPI
NtGdiEngPlgBlt(
    __in PSURFOBJ psoTrg,
    __in PSURFOBJ psoSrc,
    __in_opt PSURFOBJ psoMsk,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PCOLORADJUSTMENT pca,
    __in PPOINTL pptlBrushOrg,
    __in PPOINTFIX pptfxDest,
    __in PRECTL prclSrc,
    __in_opt PPOINTL pptlMask,
    __in ULONG iMode
    );

HPALETTE
WINAPI
NtGdiEngCreatePalette(
    __in ULONG iMode,
    __in ULONG cColors,
    __in PULONG pulColors,
    __in FLONG flRed,
    __in FLONG flGreen,
    __in FLONG flBlue
    );

BOOL
WINAPI
NtGdiEngDeletePalette(
    __in HPALETTE hPal
    );

BOOL
WINAPI
NtGdiEngStrokePath(
    __in PSURFOBJ pso,
    __in PPATHOBJ ppo,
    __in PCLIPOBJ pco,
    __in PXFORMOBJ pxo,
    __in PBRUSHOBJ pbo,
    __in PPOINTL pptlBrushOrg,
    __in PLINEATTRS plineattrs,
    __in MIX mix
    );

BOOL
WINAPI
NtGdiEngFillPath(
    __in PSURFOBJ pso,
    __in PPATHOBJ ppo,
    __in PCLIPOBJ pco,
    __in PBRUSHOBJ pbo,
    __in PPOINTL pptlBrushOrg,
    __in MIX mix,
    __in FLONG flOptions
    );

BOOL
WINAPI
NtGdiEngStrokeAndFillPath(
    __in PSURFOBJ pso,
    __in PPATHOBJ ppo,
    __in PCLIPOBJ pco,
    __in PXFORMOBJ pxo,
    __in PBRUSHOBJ pboStroke,
    __in PLINEATTRS plineattrs,
    __in PBRUSHOBJ pboFill,
    __in PPOINTL pptlBrushOrg,
    __in MIX mix,
    __in FLONG flOptions
    );

BOOL
WINAPI
NtGdiEngPaint(
    __in PSURFOBJ pso,
    __in PCLIPOBJ pco,
    __in PBRUSHOBJ pbo,
    __in PPOINTL pptlBrushOrg,
    __in MIX mix
    );

BOOL
WINAPI
NtGdiEngLineTo(
    __in PSURFOBJ pso,
    __in PCLIPOBJ pco,
    __in PBRUSHOBJ pbo,
    __in LONG x1,
    __in LONG y1,
    __in LONG x2,
    __in LONG y2,
    __in PRECTL prclBounds,
    __in MIX mix
    );

BOOL
WINAPI
NtGdiEngAlphaBlend(
    __in PSURFOBJ psoDest,
    __in PSURFOBJ psoSrc,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PRECTL prclDest,
    __in PRECTL prclSrc,
    __in PBLENDOBJ pBlendObj
    );

BOOL
WINAPI
NtGdiEngGradientFill(
    __in PSURFOBJ psoDest,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PTRIVERTEX pVertex,
    __in ULONG nVertex,
    __in PVOID pMesh,
    __in ULONG nMesh,
    __in PRECTL prclExtents,
    __in PPOINTL pptlDitherOrg,
    __in ULONG ulMode
    );

BOOL
WINAPI
NtGdiEngTransparentBlt(
    __in PSURFOBJ psoDst,
    __in PSURFOBJ psoSrc,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PRECTL prclDst,
    __in PRECTL prclSrc,
    __in ULONG iTransColor,
    __in ULONG ulReserved
    );

BOOL
WINAPI
NtGdiEngTextOut(
    __in PSURFOBJ pso,
    __in PSTROBJ pstro,
    __in PFONTOBJ pfo,
    __in PCLIPOBJ pco,
    __in PRECTL prclExtra,
    __in PRECTL prclOpaque,
    __in PBRUSHOBJ pboFore,
    __in PBRUSHOBJ pboOpaque,
    __in PPOINTL pptlOrg,
    __in MIX mix
    );

BOOL
WINAPI
NtGdiEngStretchBltROP(
    __in PSURFOBJ psoTrg,
    __in PSURFOBJ psoSrc,
    __in PSURFOBJ psoMask,
    __in PCLIPOBJ pco,
    __in PXLATEOBJ pxlo,
    __in PCOLORADJUSTMENT pca,
    __in PPOINTL pptlBrushOrg,
    __in PRECTL prclTrg,
    __in PRECTL prclSrc,
    __in PPOINTL pptlMask,
    __in ULONG iMode,
    __in PBRUSHOBJ pbo,
    __in ROP4 rop4
    );


ULONG
WINAPI
NtGdiXLATEOBJ_cGetPalette(
    __in PXLATEOBJ pxlo,
    __in ULONG iPal,
    __in ULONG cPal,
    __out PULONG pPal
    );


ULONG
WINAPI
NtGdiCLIPOBJ_cEnumStart(
    __in PCLIPOBJ pco,
    __in BOOL bAll,
    __in ULONG iType,
    __in ULONG iDirection,
    __in ULONG cLimit
    );

BOOL
WINAPI
NtGdiCLIPOBJ_bEnum(
    __in PCLIPOBJ pco,
    __in ULONG cj,
    __out PULONG pul
    );

PPATHOBJ
WINAPI
NtGdiCLIPOBJ_ppoGetPath(
    __in PCLIPOBJ pco
    );

PCLIPOBJ
WINAPI
NtGdiEngCreateClip();

VOID
WINAPI
NtGdiEngDeleteClip(
    __in PCLIPOBJ pco
    );

PVOID
WINAPI
NtGdiBRUSHOBJ_pvAllocRbrush(
    __in PBRUSHOBJ pbo,
    __in ULONG cj
    );

PVOID
WINAPI
NtGdiBRUSHOBJ_pvGetRbrush(
    __in PBRUSHOBJ pbo
    );

ULONG
WINAPI
NtGdiBRUSHOBJ_ulGetBrushColor(
    __in PBRUSHOBJ pbo
    );

HANDLE
WINAPI
NtGdiBRUSHOBJ_hGetColorTransform(
    __in PBRUSHOBJ pbo
    );

BOOL
WINAPI
NtGdiXFORMOBJ_bApplyXform(
    __in PXFORMOBJ pxo,
    __in ULONG iMode,
    __in ULONG cPoints,
    __in PPOINTL pvIn,
    __out PPOINTL pvOut
    );

ULONG
WINAPI
NtGdiXFORMOBJ_iGetXform(
    __in PXFORMOBJ pxo,
    __out_opt PXFORML pxform
    );

VOID
WINAPI
NtGdiFONTOBJ_vGetInfo(
    __in PFONTOBJ pfo,
    __in ULONG cjSize,
    __out PFONTINFO pfi
    );

ULONG
WINAPI
NtGdiFONTOBJ_cGetGlyphs(
    __in PFONTOBJ pfo,
    __in ULONG iMode,
    __in ULONG cGlyph,
    __in PHGLYPH phg,
    __out PPVOID ppvGlyph
    );

PXFORMOBJ
WINAPI
NtGdiFONTOBJ_pxoGetXform(
    __in PFONTOBJ pfo
    );

PIFIMETRICS
WINAPI
NtGdiFONTOBJ_pifi(
    __in PFONTOBJ pfo
    );

PFD_GLYPHSET
WINAPI
NtGdiFONTOBJ_pfdg(
    __in PFONTOBJ pfo
    );

ULONG
WINAPI
NtGdiFONTOBJ_cGetAllGlyphHandles(
    __in PFONTOBJ pfo,
    __out_opt PHGLYPH phg
    );

PVOID
WINAPI
NtGdiFONTOBJ_pvTrueTypeFontFile(
    __in PFONTOBJ pfo,
    __out PULONG pcjFile
    );

PFD_GLYPHATTR
WINAPI
NtGdiFONTOBJ_pQueryGlyphAttrs(
    __in PFONTOBJ pfo,
    __in ULONG iMode
    );

BOOL
WINAPI
NtGdiSTROBJ_bEnum(
    __in PSTROBJ pstro,
    __out PULONG pc,
    __out PPGLYPHPOS ppgpos
    );

BOOL
WINAPI
NtGdiSTROBJ_bEnumPositionsOnly(
    __in PSTROBJ pstro,
    __out PULONG pc,
    __out PPGLYPHPOS ppgpos
    );

VOID
WINAPI
NtGdiSTROBJ_vEnumStart(
    __in PSTROBJ pstro
    );

DWORD
WINAPI
NtGdiSTROBJ_dwGetCodePage(
    __in PSTROBJ pstro
    );

BOOL
WINAPI
NtGdiSTROBJ_bGetAdvanceWidths(
    __in PSTROBJ pstro,
    __in ULONG iFirst,
    __in ULONG c,
    __out PPOINTQF pptqD
    );

PFD_GLYPHSET
WINAPI
NtGdiEngComputeGlyphSet(
    __in INT nCodePage,
    __in INT nFirstChar,
    __in INT cChars
    );

ULONG
WINAPI
NtGdiXLATEOBJ_iXlate(
    __in PXLATEOBJ pxlo,
    __in ULONG iColor
    );

HANDLE
WINAPI
NtGdiXLATEOBJ_hGetColorTransform(
    __in PXLATEOBJ pxlo
    );

VOID
WINAPI
NtGdiPATHOBJ_vGetBounds(
    __in PPATHOBJ ppo,
    __out PRECTFX prectfx
    );

BOOL
WINAPI
NtGdiPATHOBJ_bEnum(
    __in PPATHOBJ ppo,
    __out PPATHDATA ppd
    );

VOID
WINAPI
NtGdiPATHOBJ_vEnumStart(
    __in PPATHOBJ ppo
    );

VOID
WINAPI
NtGdiEngDeletePath(
    __in PPATHOBJ ppo
    );

VOID
WINAPI
NtGdiPATHOBJ_vEnumStartClipLines(
    __in PPATHOBJ ppo,
    __in PCLIPOBJ pco,
    __in PSURFOBJ pso,
    __in PLINEATTRS pla
    );

BOOL
WINAPI
NtGdiPATHOBJ_bEnumClipLines(
    __in PPATHOBJ ppo,
    __in ULONG cb,
    __out PCLIPLINE pcl
    );


BOOL
WINAPI
NtGdiEngCheckAbort(
    __in PSURFOBJ pso
    );

DHPDEV
NtGdiGetDhpdev(
    __in HDEV hdev
    );


LONG
WINAPI
NtGdiHT_Get8BPPFormatPalette(
    __out_opt PPALETTEENTRY pPaletteEntry,
    __in USHORT RedGamma,
    __in USHORT GreenGamma,
    __in USHORT BlueGamma
    );

LONG
WINAPI
NtGdiHT_Get8BPPMaskPalette(
    __out_opt PPALETTEENTRY pPaletteEntry,
    __in BOOL Use8BPPMaskPal,
    __in BYTE CMYMask,
    __in USHORT RedGamma,
    __in USHORT GreenGamma,
    __in USHORT BlueGamma
    );

BOOL
NtGdiUpdateTransform(
    __in HDC hdc
    );

DWORD
WINAPI
NtGdiSetLayout(
    __in HDC hdc,
    __in LONG wox,
    __in DWORD dwLayout
    );

BOOL
WINAPI
NtGdiMirrorWindowOrg(
    __in HDC hdc
    );

LONG
WINAPI
NtGdiGetDeviceWidth(
    __in HDC hdc
    );


BOOL
NtGdiSetPUMPDOBJ(
    __in_opt HUMPD humpd,
    __in BOOL bStoreID,
    __inout_opt PHUMPD phumpd,
    __out_opt PBOOL pbWOW64
    );

BOOL
NtGdiBRUSHOBJ_DeleteRbrush(
    __in_opt PBRUSHOBJ pbo,
    __in_opt PBRUSHOBJ pboB
    );

BOOL
NtGdiUMPDEngFreeUserMem(
    __in PKERNEL_PVOID ppv
    );

HBITMAP
WINAPI
NtGdiSetBitmapAttributes(
    __in HBITMAP hbm,
    __in DWORD dwFlags
    );

HBITMAP
WINAPI
NtGdiClearBitmapAttributes(
    __in HBITMAP hbm,
    __in DWORD dwFlags
    );

HBRUSH
WINAPI
NtGdiSetBrushAttributes(
    __in HBRUSH hbm,
    __in DWORD dwFlags
    );

HBRUSH
WINAPI
NtGdiClearBrushAttributes(
    __in HBRUSH hbr,
    __in DWORD dwFlags
    );



BOOL
WINAPI
NtGdiDrawStream(
    __in HDC hdcDst,
    __in ULONG cjIn,
    __in PVOID pvIn
    );


BOOL
WINAPI
NtGdiMakeObjectXferable(
    IN HANDLE h,
    IN DWORD dwProcessId
    );

BOOL
WINAPI
NtGdiMakeObjectUnXferable(
    IN HANDLE h
    );


BOOL
NtGdiSfmGetNotificationTokens(
    __in UINT cBytes,
    __out PUINT pNrOfTokensReturned,
    PVOID pTokenBuffer);

// "Private DWM interface"
BOOL
NtGdiSfmRegisterLogicalSurfaceForSignaling(
    __in HLSURF hlsurf,
    BOOL fSignalOnDirty);

// "Private DWM interface"
BOOL
NtGdiDwmGetHighColorMode(
    __out PDXGI_FORMAT pdxgiFormat);

// "Private DWM interface"
BOOL
NtGdiDwmSetHighColorMode(
    __in DXGI_FORMAT dxgiFormat);

// "Private DWM interface"
HANDLE
NtGdiDwmCaptureScreen(
    __in PRECT prcCapture,
    __in DXGI_FORMAT dxgiFormat);

NTSTATUS
WINAPI
NtGdiDdCreateFullscreenSprite(
    __in HDC hdc,
    __in COLORREF crKey,
    __out PHANDLE phSprite,
    __out PHDC phdcSprite);

NTSTATUS
WINAPI
NtGdiDdNotifyFullscreenSpriteUpdate(
    __in HDC hdc,
    __in HANDLE hSprite);

NTSTATUS
WINAPI
NtGdiDdDestroyFullscreenSprite(
    __in HDC hdc,
    __in HANDLE hSprite);

ULONG
WINAPI
NtGdiDdQueryVisRgnUniqueness();


BOOL
WINAPI
NtGdiHLSurfGetInformation(
    __in HLSURF hLsurf,
    __in HLSURF_INFORMATION_CLASS InformationClass,
    __in_opt PVOID InformationBuffer,
    __inout PULONG pulInformationLength    
    );


BOOL
WINAPI
NtGdiHLSurfSetInformation(
    __in HLSURF hLsurf,
    __in HLSURF_INFORMATION_CLASS InformationClass,
    __in_opt PVOID InformationBuffer,
    __in ULONG InformationLength    
    );

//[DirectX]
typedef HANDLE D3DKMT_HANDLE;

typedef PVOID PD3DKMT_ACQUIREKEYEDMUTEX;
typedef PVOID PD3DKMT_CHECKMONITORPOWERSTATE;
typedef PVOID PD3DKMT_CHECKOCCLUSION;
typedef PVOID PD3DKMT_CHECKSHAREDRESOURCEACCESS;
typedef PVOID PD3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP;
typedef PVOID PD3DKMT_CLOSEADAPTER;
typedef PVOID PD3DKMT_CONFIGURESHAREDRESOURCE;
typedef PVOID PD3DKMT_CREATEALLOCATION;
typedef PVOID PD3DKMT_CREATECONTEXT;
typedef PVOID PD3DKMT_CREATEDCFROMMEMORY;
typedef PVOID PD3DKMT_CREATEDEVICE;
typedef PVOID PD3DKMT_CREATEKEYEDMUTEX;
typedef PVOID PD3DKMT_CREATEOVERLAY;
typedef PVOID PD3DKMT_CREATESYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_DESTROYALLOCATION;
typedef PVOID PD3DKMT_DESTROYCONTEXT;
typedef PVOID PD3DKMT_DESTROYDCFROMMEMORY;
typedef PVOID PD3DKMT_DESTROYDEVICE;
typedef PVOID PD3DKMT_DESTROYKEYEDMUTEX;
typedef PVOID PD3DKMT_DESTROYOVERLAY;
typedef PVOID PD3DKMT_DESTROYSYNCHRONIZATIONOBJECT;
typedef PVOID PD3DKMT_ESCAPE;
typedef PVOID PD3DKMT_FLIPOVERLAY;
typedef PVOID PD3DKMT_GETCONTEXTSCHEDULINGPRIORITY;
typedef PVOID PD3DKMT_GETDEVICESTATE;
typedef PVOID PD3DKMT_GETDISPLAYMODELIST;
typedef PVOID PD3DKMT_GETMULTISAMPLEMETHODLIST;
typedef PVOID PD3DKMT_GETOVERLAYSTATE;
typedef PVOID PD3DKMT_GETPRESENTHISTORY;
typedef PVOID PD3DKMT_GETRUNTIMEDATA;
typedef PVOID PD3DKMT_GETSCANLINE;
typedef PVOID PD3DKMT_GETSHAREDPRIMARYHANDLE;
typedef PVOID PD3DKMT_INVALIDATEACTIVEVIDPN;
typedef PVOID PD3DKMT_LOCK;
typedef PVOID PD3DKMT_OPENADAPTERFROMDEVICENAME;
typedef PVOID PD3DKMT_OPENADAPTERFROMHDC;
typedef PVOID PD3DKMT_OPENKEYEDMUTEX;
typedef PVOID PD3DKMT_OPENRESOURCE;
typedef PVOID PD3DKMT_OPENSYNCHRONIZATIONOBJECT;
typedef PVOID PD3DKMT_POLLDISPLAYCHILDREN;
typedef PVOID PD3DKMT_PRESENT;
typedef PVOID PD3DKMT_QUERYADAPTERINFO;
typedef PVOID PD3DKMT_QUERYALLOCATIONRESIDENCY;
typedef PVOID PD3DKMT_QUERYRESOURCEINFO;
typedef PVOID PD3DKMT_RELEASEKEYEDMUTEX;
typedef PVOID PD3DKMT_RENDER;
typedef PVOID PD3DKMT_SCHEDULINGPRIORITYCLASS;
typedef PVOID PD3DKMT_SETALLOCATIONPRIORITY;
typedef PVOID PD3DKMT_SETCONTEXTSCHEDULINGPRIORITY;
typedef PVOID PD3DKMT_SETDISPLAYMODE;
typedef PVOID PD3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT;
typedef PVOID PD3DKMT_SETGAMMARAMP;
typedef PVOID PD3DKMT_SETQUEUEDLIMIT;
typedef PVOID PD3DKMT_SETVIDPNSOURCEOWNER;
typedef PVOID PD3DKMT_SHAREDPRIMARYLOCKNOTIFICATION;
typedef PVOID PD3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION;
typedef PVOID PD3DKMT_SIGNALSYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_UNLOCK;
typedef PVOID PD3DKMT_UPDATEOVERLAY;
typedef PVOID PD3DKMT_WAITFORIDLE;
typedef PVOID PD3DKMT_WAITFORSYNCHRONIZATIONOBJECT2;
typedef PVOID PD3DKMT_WAITFORVERTICALBLANKEVENT;
typedef PVOID PD3DKMT_QUERYSTATISTICS;

typedef ULONG D3DKMT_SCHEDULINGPRIORITYCLASS;

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIAcquireKeyedMutex(
    PD3DKMT_ACQUIREKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckExclusiveOwnership(
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckMonitorPowerState(
    PD3DKMT_CHECKMONITORPOWERSTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckOcclusion(
    PD3DKMT_CHECKOCCLUSION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckSharedResourceAccess(
    PD3DKMT_CHECKSHAREDRESOURCEACCESS pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICheckVidPnExclusiveOwnership(
    PD3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICloseAdapter(
    PD3DKMT_CLOSEADAPTER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIConfigureSharedResource(
    PD3DKMT_CONFIGURESHAREDRESOURCE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateAllocation(
    PD3DKMT_CREATEALLOCATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateContext(
    PD3DKMT_CREATECONTEXT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateDCFromMemory(
    PD3DKMT_CREATEDCFROMMEMORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateDevice(
    PD3DKMT_CREATEDEVICE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateKeyedMutex(
    PD3DKMT_CREATEKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateOverlay(
    PD3DKMT_CREATEOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDICreateSynchronizationObject(
    PD3DKMT_CREATESYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyAllocation(
    PD3DKMT_DESTROYALLOCATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyContext(
    PD3DKMT_DESTROYCONTEXT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyDCFromMemory(
    PD3DKMT_DESTROYDCFROMMEMORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyDevice(
    PD3DKMT_DESTROYDEVICE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyKeyedMutex(
    PD3DKMT_DESTROYKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroyOverlay(
    PD3DKMT_DESTROYOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIDestroySynchronizationObject(
    PD3DKMT_DESTROYSYNCHRONIZATIONOBJECT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIEscape(
    PD3DKMT_ESCAPE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIFlipOverlay(
    PD3DKMT_FLIPOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetContextSchedulingPriority(
    PD3DKMT_GETCONTEXTSCHEDULINGPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetDeviceState(
    PD3DKMT_GETDEVICESTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetDisplayModeList(
    PD3DKMT_GETDISPLAYMODELIST pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetMultisampleMethodList(
    PD3DKMT_GETMULTISAMPLEMETHODLIST pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetOverlayState(
    PD3DKMT_GETOVERLAYSTATE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetPresentHistory(
    PD3DKMT_GETPRESENTHISTORY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetPresentQueueEvent(
    D3DKMT_HANDLE hAdapter,
    PHANDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetProcessSchedulingPriorityClass(
    HANDLE hProcess,
    PD3DKMT_SCHEDULINGPRIORITYCLASS pPriority
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetRuntimeData(
    PD3DKMT_GETRUNTIMEDATA pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetScanLine(
    PD3DKMT_GETSCANLINE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIGetSharedPrimaryHandle(
    PD3DKMT_GETSHAREDPRIMARYHANDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIInvalidateActiveVidPn(
    PD3DKMT_INVALIDATEACTIVEVIDPN pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDILock(
    PD3DKMT_LOCK pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenAdapterFromDeviceName(
    PD3DKMT_OPENADAPTERFROMDEVICENAME pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenAdapterFromHdc(
    PD3DKMT_OPENADAPTERFROMHDC pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenKeyedMutex(
    PD3DKMT_OPENKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenResource(
    PD3DKMT_OPENRESOURCE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIOpenSynchronizationObject(
    PD3DKMT_OPENSYNCHRONIZATIONOBJECT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIPollDisplayChildren(
    PD3DKMT_POLLDISPLAYCHILDREN pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIPresent(
    PD3DKMT_PRESENT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryAdapterInfo(
    PD3DKMT_QUERYADAPTERINFO pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryAllocationResidency(
    PD3DKMT_QUERYALLOCATIONRESIDENCY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryResourceInfo(
    PD3DKMT_QUERYRESOURCEINFO pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIQueryStatistics(
    PD3DKMT_QUERYSTATISTICS pQueryStatistics
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIReleaseKeyedMutex(
    PD3DKMT_RELEASEKEYEDMUTEX pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIReleaseProcessVidPnSourceOwners(
    HANDLE hProcess
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIRender(
    PD3DKMT_RENDER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetAllocationPriority(
    PD3DKMT_SETALLOCATIONPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetContextSchedulingPriority(
    PD3DKMT_SETCONTEXTSCHEDULINGPRIORITY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetDisplayMode(
    PD3DKMT_SETDISPLAYMODE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetDisplayPrivateDriverFormat(
    PD3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetGammaRamp(
    PD3DKMT_SETGAMMARAMP pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetProcessSchedulingPriorityClass(
    HANDLE hProcess,
    D3DKMT_SCHEDULINGPRIORITYCLASS Priority
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetQueuedLimit(
    PD3DKMT_SETQUEUEDLIMIT pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISetVidPnSourceOwner(
    PD3DKMT_SETVIDPNSOURCEOWNER pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISharedPrimaryLockNotification(
    PD3DKMT_SHAREDPRIMARYLOCKNOTIFICATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISharedPrimaryUnLockNotification(
    PD3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDISignalSynchronizationObject(
    PD3DKMT_SIGNALSYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIUnlock(
    PD3DKMT_UNLOCK pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIUpdateOverlay(
    PD3DKMT_UPDATEOVERLAY pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForIdle(
    PD3DKMT_WAITFORIDLE pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForSynchronizationObject(
    PD3DKMT_WAITFORSYNCHRONIZATIONOBJECT2 pData
    );

//[DirectX]
NTSTATUS
NTAPI
NtGdiDdDDIWaitForVerticalBlankEvent(
    PD3DKMT_WAITFORVERTICALBLANKEVENT pData
    );


//[OPM]
NTSTATUS
NTAPI
NtGdiConfigureOPMProtectedOutput(
    _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_  PDXGKMDT_OPM_CONFIGURE_PARAMETERS pParameters,
    _In_  ULONG ulAdditionalParametersSize,
    _In_  PBYTE pbAdditionalParameters
    );

//[Windows2003]
BOOL
NTAPI
NtGdiConsoleTextOut(
    __in HDC hdc,
    __in PPOLYTEXTW Text,
    __in ULONG nItems,
    __in PRECTL Bounds
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiCreateOPMProtectedOutputs(
    _In_   PUNICODE_STRING pstrDeviceName,
    _In_   DXGKMDT_OPM_VIDEO_OUTPUT_SEMANTICS vos,
    _In_   DWORD dwOPMProtectedOutputArraySize,
    _Out_  PDWORD pdwNumOPMProtectedOutputsInArray,
    _Out_  POPM_PROTECTED_OUTPUT_HANDLE pohOPMProtectedOutputArray
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetCapabilitiesString(
    __in   HANDLE hMonitor,
    __out  PSTR pszString,
    __in   DWORD dwLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetCapabilitiesStringLength(
    __in   HANDLE hMonitor,
    __out  PDWORD pdwLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetTimingReport(
    __in   HANDLE hMonitor,
    __out  LPMC_TIMING_REPORT pmtr
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCIGetVCPFeature(
    __in       HANDLE hMonitor,
    __in       DWORD dwVCPCode,
    __out_opt  LPMC_VCP_CODE_TYPE pvct,
    __out      PDWORD pdwCurrentValue,
    __out_opt  PDWORD pdwMaximumValue
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCISaveCurrentSettings(
    __in HANDLE hMonitor
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiDDCCISetVCPFeature(
    __in  HANDLE hMonitor,
    __in  DWORD dwVCPCode,
    __in  DWORD dwNewValue
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiDestroyOPMProtectedOutput(
     _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput
    );

//[Monitor]
BOOL
NTAPI
NtGdiDestroyPhysicalMonitor(
    __in  HANDLE hMonitor
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontChunk(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontClose(
    ULONG Unknown
    );

//[Window2003]
NTSTATUS
NTAPI
NtGdiEnumFontOpen(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );

//[Other]
NTSTATUS
NTAPI
NtGdiFullscreenControl(
    __in ULONG Function,
    __in PVOID Input,
    __in ULONG InputLength,
    __out PVOID Output OPTIONAL,
    __in ULONG OutputLength
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCOPPCompatibleOPMInformation(
    _In_   OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_   PDXGKMDT_OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS pParameters,
    _Out_  PDXGKMDT_OPM_REQUESTED_INFORMATION pRequestedInformation
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCertificate(
    _In_   PUNICODE_STRING pstrDeviceName,
    _In_   DXGKMDT_CERTIFICATE_TYPE ctPVPCertificateType,
    _Out_  PBYTE pbCertificate,
    _Out_  ULONG ulCertificateLength
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetCertificateSize(
    _In_   PUNICODE_STRING  pstrDeviceName,
    _In_   DXGKMDT_CERTIFICATE_TYPE ctPVPCertificateType,
    _Out_  PULONG pulCertificateLength
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetNumberOfPhysicalMonitors(
    __in   PUNICODE_STRING pstrDeviceName,
    __out  PDWORD pdwNumberOfPhysicalMonitors
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetOPMInformation(
    _In_   OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_   PDXGKMDT_OPM_GET_INFO_PARAMETERS pParameters,
    _Out_  PDXGKMDT_OPM_REQUESTED_INFORMATION pRequestedInformation
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetOPMRandomNumber(
    _In_   OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _Out_  PDXGKMDT_OPM_RANDOM_NUMBER prnRandomNumber
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetPhysicalMonitorDescription(
    __in   HANDLE hMonitor,
    __in   DWORD dwPhysicalMonitorDescriptionSizeInChars,
    __out  PWSTR szPhysicalMonitorDescription
    );

//[Monitor]
NTSTATUS
NTAPI
NtGdiGetPhysicalMonitors(
    __in   PUNICODE_STRING pstrDeviceName,
    __in   DWORD dwPhysicalMonitorArraySize,
    __out  PDWORD pdwNumPhysicalMonitorHandlesInArray,
    __out  PHANDLE phPhysicalMonitorArray
    );

//[Other]
NTSTATUS
NTAPI
NtGdiGetSpoolMessage(
    PVOID Ptr1,
    ULONG Data1,
    PVOID Ptr2,
    ULONG Data2
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiGetSuggestedOPMProtectedOutputArraySize(
    _In_   PUNICODE_STRING pstrDeviceName,
    _Out_  PDWORD pdwSuggestedOPMProtectedOutputArraySize
    );

//[Other]
NTSTATUS
NTAPI
NtGdiInitSpool(
    );

//[OPM]
NTSTATUS
NTAPI
NtGdiSetOPMSigningKeyAndSequenceNumbers(
    _In_  OPM_PROTECTED_OUTPUT_HANDLE opoOPMProtectedOutput,
    _In_  PDXGKMDT_OPM_ENCRYPTED_PARAMETERS pParameters /* MSDN has _Out_ const .. I don't believe it */
    );

//[Windows2003]
NTSTATUS
NTAPI
NtGdiSetupPublicCFONT(
    ULONG Unknown,
    ULONG Unknown,
    ULONG Unknown
    );
