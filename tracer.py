import os
import optparse
import re
from threading import Thread
import ctypes
from time import sleep

curPath = os.path.dirname(os.path.abspath(__file__))


def compareTrace(trace1, trace2):
    "Compares 2 traces (Takes only the functions)"
    if len(trace1) != len(trace2):
        print "Different len"
        return False
    for line in range(1, len(trace1) - endOfTrace(trace1)):  # To not compare the output (prints and such)
        # We only want the function and not the details so we only compare until the first '('
        if trace1[line][line.find('N'):trace1[line].find('(')] != trace2[line][line.find('N'):trace2[line].find('(')]:
            print str(line) + ": ", trace1[line].replace('\n', ''), " - ", trace2[line]
            return False
    return True


def endOfTrace(trace):
    "Returns the index of where the trace ends and the output begins"
    for i in range(len(trace)):
        if re.search("Terminate", trace[i]):
            return len(trace) - i


def compareTraceFunctions(trace1, trace2):
    "Compares the 2 traces"
    trace1Functions = []
    for line in trace1:
        if line.find('(') != -1:
            trace1Functions.append(line[line.find('N'):line.find('(')])
    trace2Functions = []
    for line in trace2:
        if line.find('(') != -1:
            trace2Functions.append(line[line.find('N'):line.find('(')])
    return existAll(trace1Functions, trace2Functions)


def exist(lst, func):
    "Checks that func is inside lst"
    for function in lst:
        if function == func:
            return True
    # print "does not exist: ",func
    return False


def existAll(lst1, lst2):
    "Checks that lst1 and lst2 exist inside eachother"
    for line in lst1:
        if exist(lst2, line) == False:
            # print line
            return False
    for line in lst2:
        if exist(lst1, line) == False:
            # print line
            return False
    return True


def compare(trigerType, traceNum):
    "Compares the recieved trace number with the default run"
    default = os.path.join(curPath, "Traces", trigerType + "0.txt")
    this = os.path.join(curPath, "Traces", trigerType + str(traceNum) + ".txt")
    defaultFile = open(default, "rt")
    thisFile = open(this, "rt")
    defaultTrace = defaultFile.readlines()
    thisTrace = thisFile.readlines()
    defaultFile.close()
    thisFile.close()
    return compareTraceFunctions(defaultTrace, thisTrace)


def traceFile(filePath, trigerType, traceNum):
    "Creates a tracefile for the specified file"
    tracer = os.path.join(curPath, "NtTrace", "NtTrace.exe")
    os.system(tracer + " " + filePath + " > " + os.path.join(curPath, "Traces", trigerType + str(traceNum) + ".txt"))


def nextTimeTriger():
    "Sets off the next time triger"
    # nextTimeTriger.finished = True
    # return
    if (nextTimeTriger.hour == 24):
        nextTimeTriger.finished = True
        return
    if (nextTimeTriger.minute == 60 and nextTimeTriger.hour == 23):
        nextTimeTriger.minute = 0
        nextTimeTriger.hour += 1
        nextTimeTriger.finished = True
        return
    if (nextTimeTriger.minute == 60 and nextTimeTriger.hour < 24):
        nextTimeTriger.minute = 0
        nextTimeTriger.hour += 1
    if (nextTimeTriger.minute < 60 and nextTimeTriger.hour < 24):
        os.system(
            os.path.join(curPath, "changeTime.exe") + " " + str(nextTimeTriger.hour) + " " + str(nextTimeTriger.minute))
        with open(os.path.join(curPath, "Trigers", "trigerLog.txt"), "at") as f:
            f.write("Changed time to: " + str(nextTimeTriger.hour) + ":" + str(nextTimeTriger.minute) + "\n")
    nextTimeTriger.minute += 1


nextTimeTriger.minute = 0
nextTimeTriger.hour = 0
nextTimeTriger.finished = False


def getLastTriger():
    "Returns last triger"
    with open(os.path.join(curPath, "Trigers", "trigerLog.txt"), "rt") as f:
        return f.readlines()[-1]


def timeTrace(filePath):
    print "Creating Traces..."
    traceNum = 0
    traceFile(filePath, "time", traceNum)
    print "First trace created!(Default Trace)"
    traceNum += 1
    nextTimeTriger()
    traceFile(filePath, "time", traceNum)
    traceNum += 1
    # traceNum - 1 because first trace is number 0 and so on
    while (compare("time", traceNum - 1) == True and not nextTimeTriger.finished):
        os.remove(os.path.join(curPath, "Traces", "time" + str(traceNum - 1) + ".txt"))
        nextTimeTriger()
        traceFile(filePath, "time", traceNum)
        traceNum += 1
    if (traceNum == 1440):  # 1440 total time configurations
        print "Ran all time trigers and file behaved the same"
    else:
        print "Behaved differently: ", getLastTriger()
    return True


def nextKeyboardTriger():
    "Sets off the next keyboard triger"
    # print "in keyboard function"
    if (nextKeyboardTriger.keyboardNum == 238):
        nextKeyboardTriger.finished = True
        return

    os.system(os.path.join(curPath, "changeKeyboard.exe") + " " + nextKeyboardTriger.keyboardList[
        nextKeyboardTriger.keyboardNum].replace("\n", ""))
    # print "added keyboard!"

    with open(os.path.join(curPath, "Trigers", "trigerLog.txt"), "at") as f:
        f.write("Added keyboard: " + str(nextKeyboardTriger.keyboardList[nextKeyboardTriger.keyboardNum]))

    nextKeyboardTriger.keyboardNum += 1


nextKeyboardTriger.keyboardNum = 0
nextKeyboardTriger.keyboardList = open(os.path.join(curPath, "keyboards.txt"), 'rt').readlines()
nextKeyboardTriger.finished = False


def keyboardTrace(filePath):
    print "Creating Traces..."
    traceNum = 0
    traceFile(filePath, "keyboard", traceNum)
    print "First trace created!(Default Trace)"
    traceNum += 1
    nextKeyboardTriger()
    traceFile(filePath, "keyboard", traceNum)
    traceNum += 1
    print "Second trace created!"
    # traceNum - 1 because first trace is number 0 and so on
    while (compare("keyboard", traceNum - 1) == True and nextKeyboardTriger.finished == False):
        os.remove(os.path.join(curPath, "Traces", "keyboard" + str(traceNum - 1) + ".txt"))
        nextKeyboardTriger()
        traceFile(filePath, "keyboard", traceNum)
        traceNum += 1
    if (traceNum == 238):  # 238 keyboards avaiable
        print "Ran all time trigers and file behaved the same"
    else:
        print "Behaved differently: ", getLastTriger()
    return True


def moveMouse():
    sleep(1)
    ctypes.windll.user32.SetCursorPos(0, 0)
    ctypes.windll.user32.SetCursorPos(0, 1)
    ctypes.windll.user32.SetCursorPos(1, 1)
    ctypes.windll.user32.SetCursorPos(2, 2)


def mouseTrace(path):
    print "Creating mouse trigers..."
    print "Creating first default run..."
    traceNum = 0
    traceFile(path, "mouse", traceNum)
    print "Created default Trace!"
    print "Tracing with mouse movement..."
    traceNum += 1
    mouseMovement = Thread(target=moveMouse)
    traceMouseMovement = Thread(target=traceFile, args=(path, "mouse", traceNum))
    traceMouseMovement.start()
    mouseMovement.start()
    traceMouseMovement.join()
    mouseMovement.join()
    traceNum += 1
    print "Finished tracing mouse movement..."
    result = compare("mouse", traceNum - 1)
    if result == True:
        print "Mouse movement is not a triger"
    else:
        print "Mouse movement is a triger"


def main(filePath):
    print filePath
    # timeTrace(filePath)
    mouseTrace(filePath)
    return True


if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-f", "--file", dest="file", help="File to recieve")
    option, argument = parser.parse_args()
    try:
        main(option.file)
    except Exception, e:
        print "Faield to execute main:", e
