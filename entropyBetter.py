# file_entropy.py
#
# Shannon Entropy of a file
# = minimum average number of bits per character
# required for encoding (compressing) the file
#
# So the theoretical limit (in bytes) for data compression:
# Shannon Entropy of the file * file size (in bytes) / 8
# (Assuming the file is a string of byte-size (UTF-8?) characters
# because if not then the Shannon Entropy value would be different.)
# FB - 201011291

import math


def getEntropy(path):
    # read the whole file into a byte array
    f = open(path, "rb")
    byteArr = map(ord, f.read())
    f.close()
    fileSize = len(byteArr)
    print 'File size in bytes:'
    print fileSize
    print

    # calculate the frequency of each byte value in the file
    freqList = []
    b = [0] * 256
    for byte in byteArr:
        b[byte] += 1
    for i in range(len(b)):
        freqList.append(float(b[i]) / fileSize)
    # print 'Frequencies of each byte-character:'
    # print freqList
    # print

    # Shannon entropy
    ent = 0.0
    for freq in freqList:
        if freq > 0:
            ent = ent + freq * math.log(freq, 2)
    ent = -ent
    # print 'Shannon entropy (min bits per byte-character):'
    return ent * 12.5
    #print
    #print 'Min possible file size assuming max theoretical compression efficiency:'
    #print (ent * fileSize), 'in bits'
    #print (ent * fileSize) / 8, 'in bytes'
